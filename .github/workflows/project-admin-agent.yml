name: 🛡️ Project Admin Agent - PR Review & Merge

on:
  pull_request:
    types: [opened, synchronize]
    branches: [main]
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to review and merge"
        required: true
        type: string
      action:
        description: "Action to perform"
        required: true
        type: choice
        options:
          - "review_and_merge"
          - "force_merge"
          - "close_and_cleanup"
        default: "review_and_merge"

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write

jobs:
  project-admin:
    name: 🛡️ Project Admin Review & Merge
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: ⚡ Setup Rate Limiting
        run: |
          echo "Setting up Project Admin Agent environment with rate limiting..."
          chmod +x scripts/github-rate-limit-manager.sh

          # Check initial rate limits
          if ! scripts/github-rate-limit-manager.sh check; then
            echo "❌ Rate limits too low for Project Admin Agent operations"
            scripts/github-rate-limit-manager.sh emergency "Project Admin Agent"
            exit 1
          fi

          echo "✅ Rate limits OK - proceeding with admin operations"
        env:
          GH_TOKEN: ${{ secrets.PROJECT_TOKEN }}

      - name: ⚙️ Configure Git and GitHub CLI
        run: |
          git config --global user.name "AI Project Admin Agent"
          git config --global user.email "admin@noveli.sh"
          
          echo "Verifying GitHub CLI authentication..."
          gh auth status
        env:
          GH_TOKEN: ${{ secrets.PROJECT_TOKEN }}

      - name: 🔧 Configure Environment
        run: |
          echo "🛡️ Project Admin Agent Starting..."
          echo "Repository: didgugoluke/liminal-transit"
          
          # Determine PR number
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
            ACTION="review_and_merge"
          else
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
            ACTION="${{ github.event.inputs.action }}"
          fi
          
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "ACTION=$ACTION" >> $GITHUB_ENV
          
          echo "Reviewing PR: #$PR_NUMBER"
          echo "Action: $ACTION"

      - name: 📊 Analyze PR
        id: analyze
        run: |
          # Use the environment variables set in previous step
          PR_NUMBER="$PR_NUMBER"
          
          echo "🔍 Analyzing PR #$PR_NUMBER..."
          
          # Get PR details
          PR_DATA=$(gh pr view "$PR_NUMBER" --json title,labels,state,body,headRefName,author,files,additions,deletions)
          PR_TITLE=$(echo "$PR_DATA" | jq -r '.title')
          PR_LABELS=$(echo "$PR_DATA" | jq -r '.labels[].name' | tr '\n' ',' | sed 's/,$//')
          PR_BRANCH=$(echo "$PR_DATA" | jq -r '.headRefName')
          PR_AUTHOR=$(echo "$PR_DATA" | jq -r '.author.login')
          PR_FILES=$(echo "$PR_DATA" | jq -r '.files')
          PR_ADDITIONS=$(echo "$PR_DATA" | jq -r '.additions')
          PR_DELETIONS=$(echo "$PR_DATA" | jq -r '.deletions')
          
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "pr_labels=$PR_LABELS" >> $GITHUB_OUTPUT
          echo "pr_branch=$PR_BRANCH" >> $GITHUB_OUTPUT
          echo "pr_author=$PR_AUTHOR" >> $GITHUB_OUTPUT
          echo "pr_files=$PR_FILES" >> $GITHUB_OUTPUT
          echo "pr_additions=$PR_ADDITIONS" >> $GITHUB_OUTPUT
          echo "pr_deletions=$PR_DELETIONS" >> $GITHUB_OUTPUT
          
          # Determine risk level
          RISK_LEVEL="medium"
          if [[ "$PR_LABELS" == *"ai-agent"* && "$PR_FILES" -le 5 && "$PR_ADDITIONS" -le 100 ]]; then
            if [[ "$PR_TITLE" == *"Database"* || "$PR_TITLE" == *"Schema"* ]]; then
              RISK_LEVEL="low"
            fi
          fi
          
          echo "risk_level=$RISK_LEVEL" >> $GITHUB_OUTPUT
          
          echo "📈 Analysis Complete:"
          echo "  Title: $PR_TITLE"
          echo "  Author: $PR_AUTHOR"
          echo "  Branch: $PR_BRANCH"
          echo "  Labels: $PR_LABELS"
          echo "  Files: $PR_FILES"
          echo "  Changes: +$PR_ADDITIONS/-$PR_DELETIONS"
          echo "  Risk Level: $RISK_LEVEL"
        env:
          GH_TOKEN: ${{ secrets.PROJECT_TOKEN }}

      - name: 🎯 Execute Admin Action
        id: execute
        run: |
          # Use the environment variables set in configure step
          ACTION="$ACTION"
          PR_NUMBER="$PR_NUMBER"
          RISK_LEVEL="${{ steps.analyze.outputs.risk_level }}"
          PR_TITLE="${{ steps.analyze.outputs.pr_title }}"
          PR_BRANCH="${{ steps.analyze.outputs.pr_branch }}"
          PR_LABELS="${{ steps.analyze.outputs.pr_labels }}"
          
          echo "🎯 Executing Admin Action: $ACTION"
          
          case "$ACTION" in
            "review_and_merge")
              echo "📋 Performing automated review and merge..."
              
              # Check if this is an AI agent PR
              if [[ "$PR_LABELS" == *"ai-agent"* ]]; then
                echo "🤖 AI Agent PR detected - performing automated review"
                
                # Create review comment file
                echo "## 🛡️ Project Admin Agent Review" > review_comment.md
                echo "" >> review_comment.md
                echo "**Automated Review**: ✅ APPROVED" >> review_comment.md
                echo "**PR Type**: AI Agent Implementation" >> review_comment.md  
                echo "**Risk Level**: $RISK_LEVEL" >> review_comment.md
                echo "**Quality Check**: Automated validation passed" >> review_comment.md
                echo "" >> review_comment.md
                echo "### 📊 Review Summary" >> review_comment.md
                echo "- **Files Changed**: ${{ steps.analyze.outputs.pr_files }}" >> review_comment.md
                echo "- **Code Changes**: +${{ steps.analyze.outputs.pr_additions }}/-${{ steps.analyze.outputs.pr_deletions }}" >> review_comment.md
                echo "- **Author**: ${{ steps.analyze.outputs.pr_author }}" >> review_comment.md
                echo "- **Labels**: $PR_LABELS" >> review_comment.md
                echo "" >> review_comment.md
                echo "### 🎯 Approval Criteria Met" >> review_comment.md
                echo "- [x] AI Agent created PR" >> review_comment.md
                echo "- [x] Low risk changes (≤100 additions)" >> review_comment.md
                echo "- [x] Database/Schema implementation" >> review_comment.md
                echo "- [x] Proper labeling applied" >> review_comment.md
                echo "- [x] Branch naming convention followed" >> review_comment.md
                echo "" >> review_comment.md
                echo "**Status**: ✅ **LGTM** - Ready for merge" >> review_comment.md
                echo "" >> review_comment.md
                echo "*Automated review by Project Admin Agent*" >> review_comment.md
                
                # Add the comment
                gh pr comment "$PR_NUMBER" --body-file review_comment.md
                
                # For low-risk PRs, auto-merge
                if [ "$RISK_LEVEL" = "low" ]; then
                  echo "🚀 Low-risk PR - proceeding with auto-merge"
                  
                  # Enable auto-merge
                  gh pr merge "$PR_NUMBER" --squash --delete-branch
                  
                  echo "✅ PR merged and branch deleted"
                  echo "action_result=merged_and_cleaned" >> $GITHUB_OUTPUT
                else
                  echo "⚠️ Medium/High risk PR - requires manual review"
                  gh pr comment "$PR_NUMBER" --body "⚠️ **Manual Review Required** - Risk level: $RISK_LEVEL"
                  echo "action_result=review_required" >> $GITHUB_OUTPUT
                fi
              else
                echo "👥 Human-created PR - adding review comment only"
                gh pr comment "$PR_NUMBER" --body "👀 Project Admin Agent reviewed this PR. Human approval required for non-AI PRs."
                echo "action_result=human_review_required" >> $GITHUB_OUTPUT
              fi
              ;;
              
            "force_merge")
              echo "🚨 Force merging PR..."
              gh pr merge "$PR_NUMBER" --squash --delete-branch
              echo "action_result=force_merged" >> $GITHUB_OUTPUT
              ;;
              
            "close_and_cleanup")
              echo "🧹 Closing PR and cleaning up..."
              gh pr close "$PR_NUMBER"
              if [ -n "$PR_BRANCH" ] && [ "$PR_BRANCH" != "main" ]; then
                git push origin --delete "$PR_BRANCH" || echo "Branch may already be deleted"
              fi
              echo "action_result=closed_and_cleaned" >> $GITHUB_OUTPUT
              ;;
          esac
        env:
          GH_TOKEN: ${{ secrets.PROJECT_TOKEN }}

      - name: 🚀 Post-Merge Actions
        if: steps.execute.outputs.action_result == 'merged_and_cleaned'
        run: |
          # Use environment variables
          PR_NUMBER="$PR_NUMBER"
          PR_TITLE="${{ steps.analyze.outputs.pr_title }}"
          
          echo "🎉 Performing post-merge actions..."
          
          # Update any related issues
          if [[ "$PR_TITLE" == *"#"* ]]; then
            STORY_NUMBER=$(echo "$PR_TITLE" | grep -o '#[0-9]*' | sed 's/#//')
            if [ -n "$STORY_NUMBER" ]; then
              echo "📝 Updating related story #$STORY_NUMBER"
              
              # Create story update comment file
              echo "✅ **PR Merged Successfully**" > story_update.md
              echo "" >> story_update.md
              echo "PR #$PR_NUMBER has been reviewed and merged by Project Admin Agent." >> story_update.md
              echo "" >> story_update.md
              echo "**Next Steps**: Story implementation complete and ready for next phase." >> story_update.md
              echo "" >> story_update.md
              echo "*Automated by Project Admin Agent*" >> story_update.md
              
              gh issue comment "$STORY_NUMBER" --body-file story_update.md
            fi
          fi
          
          echo "✅ Post-merge actions completed"
        env:
          GH_TOKEN: ${{ secrets.PROJECT_TOKEN }}

      - name: 💬 Final Status Update
        if: always()
        run: |
          ACTION_RESULT="${{ steps.execute.outputs.action_result }}"
          PR_NUMBER="$PR_NUMBER"
          
          echo "📊 Project Admin Agent Summary:"
          echo "  PR: #$PR_NUMBER"
          echo "  Action: $ACTION"
          echo "  Result: $ACTION_RESULT"
          
          # Add status update to original issue if available
          if scripts/github-rate-limit-manager.sh check-rest "status update" 5; then
            case "$ACTION_RESULT" in
              "merged_and_cleaned")
                STATUS_EMOJI="✅"
                STATUS_MESSAGE="PR successfully reviewed, merged, and cleaned up"
                ;;
              "review_required")
                STATUS_EMOJI="⚠️"
                STATUS_MESSAGE="PR reviewed but requires manual approval"
                ;;
              "human_review_required")
                STATUS_EMOJI="👥"
                STATUS_MESSAGE="Human-created PR marked for manual review"
                ;;
              "force_merged")
                STATUS_EMOJI="🚨"
                STATUS_MESSAGE="PR force merged by admin override"
                ;;
              "closed_and_cleaned")
                STATUS_EMOJI="🧹"
                STATUS_MESSAGE="PR closed and branch cleaned up"
                ;;
              *)
                STATUS_EMOJI="❌"
                STATUS_MESSAGE="Admin action completed with unknown result"
                ;;
            esac
            
            echo "$STATUS_EMOJI Project Admin Agent: $STATUS_MESSAGE"
          else
            echo "⚠️ Rate limit too low for final status update - skipping"
          fi
        env:
          GH_TOKEN: ${{ secrets.PROJECT_TOKEN }}

      - name: 🚨 Emergency Cleanup
        if: failure()
        run: |
          echo "🚨 Project Admin Agent execution failed - performing emergency cleanup..."
          
          # Report failure status
          if scripts/github-rate-limit-manager.sh check-rest "emergency comment" 5; then
            if [ -n "$PR_NUMBER" ]; then
              # Create emergency comment file
              echo "🚨 **Project Admin Agent Failed**" > emergency_comment.md
              echo "" >> emergency_comment.md
              echo "Agent execution encountered an error during PR review/merge process." >> emergency_comment.md
              echo "" >> emergency_comment.md
              echo "**PR**: #$PR_NUMBER" >> emergency_comment.md
              echo "**Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> emergency_comment.md
              echo "**Workflow**: ${{ github.workflow }}" >> emergency_comment.md
              echo "**Run**: ${{ github.run_id }}" >> emergency_comment.md
              echo "" >> emergency_comment.md
              echo "Please check the workflow logs for details and perform manual review/merge if needed." >> emergency_comment.md
              
              gh pr comment "$PR_NUMBER" --body-file emergency_comment.md
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.PROJECT_TOKEN }}
