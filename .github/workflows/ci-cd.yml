name: 🤖 AI Native CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: read
  security-events: write
  actions: read

env:
  NODE_VERSION: 18

jobs:
  # =============================================================================
  # AI QUALITY ASSURANCE
  # =============================================================================
  ai-quality-check:
    name: 🤖 AI Quality Assurance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Check if project is scaffolded
        id: check-scaffold
        run: |
          if [ -d "src" ]; then
            echo "scaffolded=true" >> $GITHUB_OUTPUT
          else
            echo "scaffolded=false" >> $GITHUB_OUTPUT
          fi

      - name: TypeScript type checking
        if: steps.check-scaffold.outputs.scaffolded == 'true'
        run: |
          # Check if any TypeScript files exist before running typecheck
          if find src -name "*.ts" -o -name "*.tsx" | grep -q .; then
            echo "Found TypeScript files, running type check..."
            pnpm typecheck
          else
            echo "No TypeScript files found, skipping type check..."
          fi

      - name: ESLint code quality
        if: steps.check-scaffold.outputs.scaffolded == 'true'
        run: |
          # Check if ESLint config exists before running lint
          if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f ".eslintrc.yml" ] || [ -f "eslint.config.js" ] || grep -q '"eslintConfig"' package.json; then
            echo "Found ESLint configuration, running lint check..."
            pnpm lint
          else
            echo "No ESLint configuration found, skipping lint check..."
          fi

      - name: Prettier formatting
        if: steps.check-scaffold.outputs.scaffolded == 'true'
        run: |
          # Check if Prettier config exists before running format check
          if [ -f ".prettierrc" ] || [ -f ".prettierrc.json" ] || [ -f ".prettierrc.js" ] || [ -f "prettier.config.js" ] || grep -q '"prettier"' package.json; then
            echo "Found Prettier configuration, running format check..."
            pnpm format:check
          else
            echo "No Prettier configuration found, skipping format check..."
          fi

      - name: Project not scaffolded notification
        if: steps.check-scaffold.outputs.scaffolded == 'false'
        run: |
          echo "🏗️ Project not yet scaffolded - skipping code quality checks"
          echo "📋 Foundation steps completed:"
          echo "  ✅ Dependencies installed successfully"
          echo "  ✅ Ready for Epic 1: Core Platform Foundation"

      - name: AI Health Check
        if: steps.check-scaffold.outputs.scaffolded == 'true'
        run: pnpm ai:health-check

  # =============================================================================
  # COMPREHENSIVE TESTING
  # =============================================================================
  test-suite:
    name: 🧪 Comprehensive Test Suite
    runs-on: ubuntu-latest
    needs: ai-quality-check
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Check if project is scaffolded
        id: check-scaffold
        run: |
          if [ -d "src" ]; then
            echo "scaffolded=true" >> $GITHUB_OUTPUT
          else
            echo "scaffolded=false" >> $GITHUB_OUTPUT
          fi

      - name: Unit Tests
        if: steps.check-scaffold.outputs.scaffolded == 'true'
        run: pnpm test:run --coverage

      - name: Upload coverage reports
        if: steps.check-scaffold.outputs.scaffolded == 'true'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info

      - name: E2E Tests
        if: steps.check-scaffold.outputs.scaffolded == 'true'
        run: pnpm test:e2e
        env:
          PLAYWRIGHT_BROWSERS_PATH: 0

      - name: Skip tests - project not scaffolded
        if: steps.check-scaffold.outputs.scaffolded == 'false'
        run: |
          echo "🧪 Skipping tests - project not yet scaffolded"
          echo "📋 Tests will run after Epic 1: Core Platform Foundation"

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  security-scan:
    name: 🔐 Security Scanning
    runs-on: ubuntu-latest
    needs: ai-quality-check
    steps:
      - uses: actions/checkout@v4

      - name: Check if project is scaffolded
        id: check-scaffold
        run: |
          if [ -d "src" ]; then
            echo "scaffolded=true" >> $GITHUB_OUTPUT
          else
            echo "scaffolded=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Trivy vulnerability scanner
        if: steps.check-scaffold.outputs.scaffolded == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        if: steps.check-scaffold.outputs.scaffolded == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

      - name: Skip security scan - project not scaffolded
        if: steps.check-scaffold.outputs.scaffolded == 'false'
        run: |
          echo "🔐 Skipping security scan - project not yet scaffolded"
          echo "📋 Security scanning will activate after Epic 1: Core Platform Foundation"

  # =============================================================================
  # BUILD (No Deployment Yet)
  # =============================================================================
  build:
    name: 🚀 Build Application
    runs-on: ubuntu-latest
    needs: [test-suite, security-scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Check if project is scaffolded
        id: check-scaffold
        run: |
          if [ -d "src" ]; then
            echo "scaffolded=true" >> $GITHUB_OUTPUT
          else
            echo "scaffolded=false" >> $GITHUB_OUTPUT
          fi

      - name: Build application
        if: steps.check-scaffold.outputs.scaffolded == 'true'
        run: pnpm build

      - name: Upload build artifacts
        if: steps.check-scaffold.outputs.scaffolded == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

      - name: Post-build validation
        if: steps.check-scaffold.outputs.scaffolded == 'true'
        run: |
          echo "✅ Build completed successfully"
          echo "📦 Artifacts uploaded for future deployment"
          echo "🚀 Ready for deployment when infrastructure is prepared"

      - name: Foundation ready notification
        if: steps.check-scaffold.outputs.scaffolded == 'false'
        run: |
          echo "🏗️ Foundation Setup Complete"
          echo "📋 Infrastructure Status:"
          echo "  ✅ GitHub Actions workflows configured"
          echo "  ✅ Dependencies and package.json ready"
          echo "  ✅ Project structure prepared for scaffolding"
          echo "🚀 Ready for Epic 1: Core Platform Foundation"
          echo ""
          echo "Next Steps:"
          echo "  1. Run Epic Breakdown Agent for Epic 1"
          echo "  2. Scaffold Vite + React + TypeScript structure"
          echo "  3. Implement AI Native patterns"

  # =============================================================================
  # OBSERVATORY NOTIFICATION
  # =============================================================================
  notify-observatory:
    name: 📊 Observatory Notification
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
      - name: Notify Observatory
        run: |
          echo "🔭 Build complete - updating Observatory dashboard"
          echo "📊 Status: ${{ job.status }}"
          echo "🕐 Time: $(date)"
          echo "🚀 Build artifacts ready for future deployment"
          # Add actual Observatory notification logic here
