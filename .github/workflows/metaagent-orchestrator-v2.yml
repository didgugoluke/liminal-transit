name: 🧠 MetaAgent Orchestrator V2 - Natural Language Epic Interpretation

on:
  issues:
    types: [opened, labeled, edited]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      issue_number:
        description: "Issue number to process with V2 intelligence"
        required: true
        type: string
      intelligence_mode:
        description: "V2 Intelligence Mode"
        required: false
        type: choice
        default: "full_intelligence"
        options:
          - "full_intelligence"
          - "natural_language_only"
          - "claude4_reasoning"
          - "task_routing_only"
      fallback_enabled:
        description: "Enable V1 fallback if V2 fails"
        required: false
        type: boolean
        default: true

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write

jobs:
  metaagent-v2-orchestration:
    name: 🧠 MetaAgent V2 Intelligence Engine
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: ⚡ Setup Rate Limiting
        run: |
          echo "Setting up MetaAgent V2 environment with rate limiting..."
          chmod +x scripts/github-rate-limit-manager.sh

          # Check initial rate limits
          if ! scripts/github-rate-limit-manager.sh check; then
            echo "❌ Rate limits too low for MetaAgent V2 operations"
            scripts/github-rate-limit-manager.sh emergency "MetaAgent-V2"
            exit 1
          fi

          echo "✅ Rate limits OK - proceeding with V2 intelligence tasks"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ⚙️ Configure Git and GitHub CLI
        run: |
          git config --global user.name "MetaAgent Orchestrator V2"
          git config --global user.email "metaagent-v2@noveli.sh"

          # Verify GitHub CLI authentication
          if ! gh auth status; then
            echo "❌ GitHub CLI authentication failed"
            exit 1
          fi

          echo "✅ Git and GitHub CLI configured successfully"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup Node.js and AI Dependencies
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: 📦 Install V2 Intelligence Dependencies
        run: |
          # Install enhanced dependencies for V2 capabilities
          npm install @octokit/rest @octokit/action @actions/core
          npm install @anthropic-ai/sdk openai
          npm install natural compromise sentiment
          echo "✅ V2 Intelligence dependencies installed successfully"

      - name: 📊 V2 Context Analysis and Intelligence Assessment
        id: v2_context_analysis
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Analyzing context with V2 intelligence capabilities..."

          ISSUE_NUMBER="${{ github.event.inputs.issue_number }}"
          INTELLIGENCE_MODE="${{ github.event.inputs.intelligence_mode }}"
          FALLBACK_ENABLED="${{ github.event.inputs.fallback_enabled }}"

          # Handle issue number from different trigger sources
          if [ -z "$ISSUE_NUMBER" ] || [ "$ISSUE_NUMBER" = "null" ]; then
            if [ "${{ github.event_name }}" = "issues" ]; then
              ISSUE_NUMBER="${{ github.event.issue.number }}"
            elif [ "${{ github.event_name }}" = "issue_comment" ]; then
              ISSUE_NUMBER="${{ github.event.issue.number }}"
            else
              echo "❌ No issue number provided and cannot extract from event"
              exit 1
            fi
          fi

          # Set defaults for V2 operation
          if [ -z "$INTELLIGENCE_MODE" ] || [ "$INTELLIGENCE_MODE" = "null" ]; then
            INTELLIGENCE_MODE="full_intelligence"
          fi

          if [ -z "$FALLBACK_ENABLED" ] || [ "$FALLBACK_ENABLED" = "null" ]; then
            FALLBACK_ENABLED="true"
          fi

          # Get comprehensive issue context
          ISSUE_TITLE=$(gh issue view "$ISSUE_NUMBER" --json title --jq '.title')
          ISSUE_BODY=$(gh issue view "$ISSUE_NUMBER" --json body --jq '.body')
          ISSUE_LABELS=$(gh issue view "$ISSUE_NUMBER" --json labels --jq '.labels[].name' | tr '\n' ',' | sed 's/,$//')
          ISSUE_ASSIGNEES=$(gh issue view "$ISSUE_NUMBER" --json assignees --jq '.assignees[].login' | tr '\n' ',' | sed 's/,$//')

          echo "🧠 V2 Context Analysis Results:"
          echo "📋 Issue: #$ISSUE_NUMBER - $ISSUE_TITLE"
          echo "🏷️ Labels: $ISSUE_LABELS"
          echo "👥 Assignees: $ISSUE_ASSIGNEES"
          echo "🎯 Intelligence Mode: $INTELLIGENCE_MODE"
          echo "🔄 Fallback Enabled: $FALLBACK_ENABLED"

          # Set environment variables for subsequent steps
          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_ENV
          echo "ISSUE_TITLE=$ISSUE_TITLE" >> $GITHUB_ENV
          echo "ISSUE_BODY=$ISSUE_BODY" >> $GITHUB_ENV
          echo "ISSUE_LABELS=$ISSUE_LABELS" >> $GITHUB_ENV
          echo "ISSUE_ASSIGNEES=$ISSUE_ASSIGNEES" >> $GITHUB_ENV
          echo "INTELLIGENCE_MODE=$INTELLIGENCE_MODE" >> $GITHUB_ENV
          echo "FALLBACK_ENABLED=$FALLBACK_ENABLED" >> $GITHUB_ENV

          # Export for step outputs
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          echo "issue_title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
          echo "intelligence_mode=$INTELLIGENCE_MODE" >> $GITHUB_OUTPUT
          echo "fallback_enabled=$FALLBACK_ENABLED" >> $GITHUB_OUTPUT

      - name: 🧠 Natural Language Epic Interpretation Engine
        id: natural_language_processor
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "🧠 Activating Natural Language Epic Interpretation Engine..."

          # Create advanced NLP analysis script
          cat > v2-nlp-analyzer.js << 'EOF'
          const core = require('@actions/core');

          async function analyzeEpicWithNLP() {
            try {
              console.log('🧠 Starting V2 Natural Language Analysis...');
              
              const issueTitle = process.env.ISSUE_TITLE;
              const issueBody = process.env.ISSUE_BODY;
              const issueLabels = process.env.ISSUE_LABELS;
              
              // V2 Enhanced Epic Classification
              const epicPatterns = {
                'foundation': ['foundation', 'core', 'base', 'infrastructure', 'setup'],
                'intelligence': ['ai', 'agent', 'intelligence', 'reasoning', 'nlp', 'claude', 'copilot'],
                'development': ['development', 'implementation', 'code', 'feature', 'build'],
                'architecture': ['architecture', 'design', 'system', 'framework', 'pattern'],
                'integration': ['integration', 'connection', 'api', 'service', 'pipeline'],
                'optimization': ['optimization', 'performance', 'efficiency', 'improvement'],
                'monitoring': ['monitoring', 'observability', 'metrics', 'analytics', 'dashboard']
              };

              // Analyze epic type with confidence scoring
              let bestMatch = { type: 'general', confidence: 0.0, keywords: [] };
              
              for (const [epicType, keywords] of Object.entries(epicPatterns)) {
                let matchCount = 0;
                let matchedKeywords = [];
                
                keywords.forEach(keyword => {
                  const regex = new RegExp(keyword, 'gi');
                  if (regex.test(issueTitle) || regex.test(issueBody)) {
                    matchCount++;
                    matchedKeywords.push(keyword);
                  }
                });
                
                const confidence = matchCount / keywords.length;
                if (confidence > bestMatch.confidence) {
                  bestMatch = { type: epicType, confidence, keywords: matchedKeywords };
                }
              }

              // V2 Complexity Assessment
              const complexityFactors = {
                wordCount: (issueBody || '').split(' ').length,
                taskCount: (issueBody || '').split('- [ ]').length - 1,
                acceptanceCriteriaCount: (issueBody || '').split('- [').length - 1,
                labelComplexity: (issueLabels || '').split(',').length,
                hasPriority: /P[0-4]/.test(issueLabels || ''),
                hasEpicLabel: /epic/.test(issueLabels || ''),
                hasAiAgent: /ai-agent/.test(issueLabels || '')
              };

              let complexityScore = 0;
              if (complexityFactors.wordCount > 500) complexityScore += 2;
              if (complexityFactors.taskCount > 5) complexityScore += 2;
              if (complexityFactors.acceptanceCriteriaCount > 3) complexityScore += 1;
              if (complexityFactors.labelComplexity > 3) complexityScore += 1;
              if (complexityFactors.hasPriority) complexityScore += 1;
              if (complexityFactors.hasEpicLabel) complexityScore += 2;

              const complexityLevel = complexityScore >= 6 ? 'high' : 
                                   complexityScore >= 3 ? 'medium' : 'low';

              // V2 Agent Routing Intelligence
              const agentRouting = {
                primary: 'scrum-master-agent',
                secondary: [],
                reasoning: 'Default routing to Scrum Master for story management'
              };

              // Enhanced routing based on epic type and complexity
              if (bestMatch.type === 'intelligence' && complexityLevel === 'high') {
                agentRouting.primary = 'github-copilot-claude4-agent';
                agentRouting.secondary = ['scrum-master-agent', 'development-agent'];
                agentRouting.reasoning = 'High-complexity AI intelligence epic requires specialized Claude 4 agent';
              } else if (bestMatch.type === 'foundation' || bestMatch.type === 'architecture') {
                agentRouting.primary = 'epic-breakdown-agent';
                agentRouting.secondary = ['scrum-master-agent'];
                agentRouting.reasoning = 'Foundation/architecture epic requires comprehensive breakdown';
              } else if (complexityFactors.hasEpicLabel) {
                agentRouting.primary = 'epic-breakdown-agent';
                agentRouting.secondary = ['scrum-master-agent'];
                agentRouting.reasoning = 'Epic label detected - routing to Epic Breakdown Agent';
              }

              // V2 Success Prediction
              const successFactors = {
                hasAcceptanceCriteria: complexityFactors.acceptanceCriteriaCount > 0,
                hasAssignee: process.env.ISSUE_ASSIGNEES !== '',
                hasPriority: complexityFactors.hasPriority,
                hasAiAgent: complexityFactors.hasAiAgent,
                reasonableComplexity: complexityLevel !== 'high'
              };

              const successScore = Object.values(successFactors).reduce((sum, factor) => sum + (factor ? 1 : 0), 0);
              const successPrediction = successScore >= 4 ? 'high' : 
                                     successScore >= 2 ? 'medium' : 'low';

              // Output V2 Analysis Results
              console.log(`✅ Epic Type: ${bestMatch.type} (${(bestMatch.confidence * 100).toFixed(1)}% confidence)`);
              console.log(`📊 Complexity: ${complexityLevel} (score: ${complexityScore})`);
              console.log(`🎯 Routing: ${agentRouting.primary} → ${agentRouting.secondary.join(' → ')}`);
              console.log(`📈 Success Prediction: ${successPrediction} (${successScore}/5 factors)`);

              // Set outputs for GitHub Actions
              core.setOutput('epic_type', bestMatch.type);
              core.setOutput('epic_confidence', bestMatch.confidence);
              core.setOutput('complexity_level', complexityLevel);
              core.setOutput('complexity_score', complexityScore);
              core.setOutput('primary_agent', agentRouting.primary);
              core.setOutput('secondary_agents', agentRouting.secondary.join(','));
              core.setOutput('routing_reasoning', agentRouting.reasoning);
              core.setOutput('success_prediction', successPrediction);
              core.setOutput('success_score', successScore);
              core.setOutput('nlp_analysis_success', 'true');

            } catch (error) {
              console.error('❌ V2 NLP Analysis failed:', error.message);
              core.setOutput('nlp_analysis_success', 'false');
              core.setOutput('fallback_required', 'true');
              
              // Fallback to basic analysis
              core.setOutput('epic_type', 'general');
              core.setOutput('complexity_level', 'medium');
              core.setOutput('primary_agent', 'scrum-master-agent');
              core.setOutput('routing_reasoning', 'Fallback routing due to NLP analysis failure');
            }
          }

          analyzeEpicWithNLP();
          EOF

          echo "🔥 Executing V2 Natural Language Analysis..."
          node v2-nlp-analyzer.js

      - name: 🔮 Claude 4 Strategic Reasoning Engine
        id: claude4_reasoning
        if: env.INTELLIGENCE_MODE == 'full_intelligence' || env.INTELLIGENCE_MODE == 'claude4_reasoning'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "🔮 Activating Claude 4 Strategic Reasoning Engine..."

          # Create Claude 4 reasoning script (simulated for now - would integrate with actual API)
          cat > claude4-reasoning.js << 'EOF'
          const core = require('@actions/core');

          async function claude4StrategicAnalysis() {
            try {
              console.log('🔮 Starting Claude 4 Strategic Reasoning...');
              
              const issueTitle = process.env.ISSUE_TITLE;
              const issueBody = process.env.ISSUE_BODY;
              const epicType = process.env.EPIC_TYPE;
              const complexityLevel = process.env.COMPLEXITY_LEVEL;
              
              // Claude 4 Strategic Risk Assessment
              const riskFactors = {
                scope: complexityLevel === 'high' ? 0.3 : complexityLevel === 'medium' ? 0.1 : 0.0,
                dependencies: /integration|connection|api/.test(issueBody) ? 0.2 : 0.0,
                newTechnology: /ai|claude|copilot|new/.test(issueBody) ? 0.15 : 0.0,
                timeConstraints: /urgent|asap|deadline/.test(issueBody) ? 0.2 : 0.0,
                resourceConstraints: /limited|constraint|budget/.test(issueBody) ? 0.15 : 0.0
              };

              const totalRisk = Object.values(riskFactors).reduce((sum, risk) => sum + risk, 0);
              const riskLevel = totalRisk >= 0.5 ? 'high' : totalRisk >= 0.25 ? 'medium' : 'low';

              // Claude 4 Resource Optimization
              const resourceRecommendations = {
                agentCount: complexityLevel === 'high' ? 3 : complexityLevel === 'medium' ? 2 : 1,
                parallelExecution: complexityLevel !== 'low',
                monitoringLevel: riskLevel === 'high' ? 'intensive' : 'standard',
                fallbackStrategy: riskLevel === 'high' ? 'immediate' : 'delayed'
              };

              // Claude 4 Success Optimization Strategies
              const optimizationStrategies = [
                'Implement incremental delivery milestones',
                'Establish clear success criteria and metrics',
                'Enable real-time progress monitoring',
                'Prepare automated rollback procedures'
              ];

              if (riskLevel === 'high') {
                optimizationStrategies.push('Activate enhanced monitoring and intervention protocols');
                optimizationStrategies.push('Schedule intermediate checkpoints for manual review');
              }

              // Claude 4 Predictive Analytics
              const timeEstimate = {
                optimistic: complexityLevel === 'high' ? '2-3 days' : complexityLevel === 'medium' ? '1-2 days' : '0.5-1 day',
                realistic: complexityLevel === 'high' ? '3-5 days' : complexityLevel === 'medium' ? '2-3 days' : '1-2 days',
                pessimistic: complexityLevel === 'high' ? '5-7 days' : complexityLevel === 'medium' ? '3-4 days' : '2-3 days'
              };

              console.log(`🔮 Claude 4 Strategic Assessment Complete:`);
              console.log(`⚠️ Risk Level: ${riskLevel} (${(totalRisk * 100).toFixed(1)}%)`);
              console.log(`🎯 Resource Optimization: ${resourceRecommendations.agentCount} agents, ${resourceRecommendations.monitoringLevel} monitoring`);
              console.log(`⏱️ Time Estimate: ${timeEstimate.realistic} (realistic)`);
              console.log(`📋 Optimization Strategies: ${optimizationStrategies.length} recommendations generated`);

              // Set outputs for GitHub Actions
              core.setOutput('risk_level', riskLevel);
              core.setOutput('risk_score', totalRisk);
              core.setOutput('recommended_agents', resourceRecommendations.agentCount);
              core.setOutput('parallel_execution', resourceRecommendations.parallelExecution);
              core.setOutput('monitoring_level', resourceRecommendations.monitoringLevel);
              core.setOutput('time_estimate_realistic', timeEstimate.realistic);
              core.setOutput('optimization_strategies', optimizationStrategies.join('|'));
              core.setOutput('claude4_reasoning_success', 'true');

            } catch (error) {
              console.error('❌ Claude 4 Reasoning failed:', error.message);
              core.setOutput('claude4_reasoning_success', 'false');
              core.setOutput('fallback_required', 'true');
            }
          }

          claude4StrategicAnalysis();
          EOF

          # Set environment variables for Claude 4 analysis
          echo "EPIC_TYPE=${{ steps.natural_language_processor.outputs.epic_type }}" >> $GITHUB_ENV
          echo "COMPLEXITY_LEVEL=${{ steps.natural_language_processor.outputs.complexity_level }}" >> $GITHUB_ENV

          echo "🚀 Executing Claude 4 Strategic Analysis..."
          node claude4-reasoning.js

      - name: 🎯 Intelligent Task Routing Engine
        id: intelligent_routing
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🎯 Activating Intelligent Task Routing Engine..."

          # Get analysis results
          EPIC_TYPE="${{ steps.natural_language_processor.outputs.epic_type }}"
          COMPLEXITY_LEVEL="${{ steps.natural_language_processor.outputs.complexity_level }}"
          PRIMARY_AGENT="${{ steps.natural_language_processor.outputs.primary_agent }}"
          RISK_LEVEL="${{ steps.claude4_reasoning.outputs.risk_level || 'medium' }}"
          RECOMMENDED_AGENTS="${{ steps.claude4_reasoning.outputs.recommended_agents || '1' }}"

          echo "📊 Intelligent Routing Analysis:"
          echo "🎭 Epic Type: $EPIC_TYPE"
          echo "📈 Complexity: $COMPLEXITY_LEVEL"
          echo "⚠️ Risk Level: $RISK_LEVEL"
          echo "🤖 Primary Agent: $PRIMARY_AGENT"
          echo "👥 Recommended Agent Count: $RECOMMENDED_AGENTS"

          # V2 Enhanced Routing Logic
          ROUTING_STRATEGY="sequential"
          AGENT_PIPELINE=()
          PARALLEL_AGENTS=()

          case "$PRIMARY_AGENT" in
            "epic-breakdown-agent")
              AGENT_PIPELINE=("epic-breakdown-agent" "scrum-master-agent" "development-agent")
              if [ "$COMPLEXITY_LEVEL" = "high" ]; then
                ROUTING_STRATEGY="parallel_hybrid"
                PARALLEL_AGENTS=("epic-task-orchestrator" "observatory-monitoring")
              fi
              ;;
            "github-copilot-claude4-agent")
              AGENT_PIPELINE=("github-copilot-claude4-agent" "scrum-master-agent")
              if [ "$RISK_LEVEL" = "high" ]; then
                ROUTING_STRATEGY="monitored_sequential"
                PARALLEL_AGENTS=("observatory-monitoring")
              fi
              ;;
            *)
              AGENT_PIPELINE=("scrum-master-agent" "development-agent")
              ;;
          esac

          # Generate routing execution plan
          cat > /tmp/routing_plan.md << EOF
## 🎯 V2 Intelligent Routing Plan

**Epic**: #${{ env.ISSUE_NUMBER }} - ${{ env.ISSUE_TITLE }}
**Strategy**: $ROUTING_STRATEGY
**Risk Level**: $RISK_LEVEL

### 🤖 Agent Pipeline
$(printf "1. %s\n" "${AGENT_PIPELINE[@]}" | head -5)

### ⚡ Parallel Monitoring
$(printf "- %s\n" "${PARALLEL_AGENTS[@]}")

### 📊 Execution Parameters
- **Complexity**: $COMPLEXITY_LEVEL
- **Agent Count**: $RECOMMENDED_AGENTS
- **Monitoring**: ${{ steps.claude4_reasoning.outputs.monitoring_level || 'standard' }}
- **Fallback**: ${{ env.FALLBACK_ENABLED }}

---
*Generated by MetaAgent Orchestrator V2 at $(date -u '+%Y-%m-%d %H:%M:%S UTC')*
EOF

          echo "✅ Intelligent routing plan generated"

          # Set outputs
          echo "routing_strategy=$ROUTING_STRATEGY" >> $GITHUB_OUTPUT
          echo "agent_pipeline=${AGENT_PIPELINE[*]}" >> $GITHUB_OUTPUT
          echo "parallel_agents=${PARALLEL_AGENTS[*]}" >> $GITHUB_OUTPUT
          echo "execution_ready=true" >> $GITHUB_OUTPUT

      - name: 🚀 Execute V2 Intelligent Agent Routing
        if: steps.intelligent_routing.outputs.execution_ready == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🚀 Executing V2 Intelligent Agent Routing..."

          AGENT_PIPELINE="${{ steps.intelligent_routing.outputs.agent_pipeline }}"
          PARALLEL_AGENTS="${{ steps.intelligent_routing.outputs.parallel_agents }}"
          ROUTING_STRATEGY="${{ steps.intelligent_routing.outputs.routing_strategy }}"

          echo "📋 Executing strategy: $ROUTING_STRATEGY"
          echo "🤖 Agent pipeline: $AGENT_PIPELINE"

          # Execute primary agent (first in pipeline)
          PRIMARY_AGENT=$(echo "$AGENT_PIPELINE" | cut -d' ' -f1)
          
          echo "🎯 Triggering primary agent: $PRIMARY_AGENT"

          case "$PRIMARY_AGENT" in
            "epic-breakdown-agent")
              if gh workflow list | grep -q "epic-breakdown-agent.yml"; then
                gh workflow run epic-breakdown-agent.yml \
                  --field issue-number="${{ env.ISSUE_NUMBER }}" \
                  --field trigger-source="metaagent-v2" \
                  --field intelligence-context="${{ steps.natural_language_processor.outputs.epic_type }}"
              else
                echo "⚠️ Epic breakdown agent workflow not found - falling back to scrum master"
                gh workflow run scrum-master-agent.yml \
                  --field issue_number="${{ env.ISSUE_NUMBER }}" \
                  --field action="take_story"
              fi
              ;;
            "github-copilot-claude4-agent")
              if gh workflow list | grep -q "github-copilot-claude4-agent.yml"; then
                gh workflow run github-copilot-claude4-agent.yml \
                  --field agent_task="story-analysis" \
                  --field debug_mode="false"
              else
                echo "⚠️ GitHub Copilot Claude 4 agent not available - falling back to scrum master"
                gh workflow run scrum-master-agent.yml \
                  --field issue_number="${{ env.ISSUE_NUMBER }}" \
                  --field action="take_story"
              fi
              ;;
            *)
              gh workflow run scrum-master-agent.yml \
                --field issue_number="${{ env.ISSUE_NUMBER }}" \
                --field action="take_story"
              ;;
          esac

          # Execute parallel monitoring if needed
          if [ -n "$PARALLEL_AGENTS" ] && [ "$PARALLEL_AGENTS" != " " ]; then
            echo "⚡ Activating parallel monitoring agents..."
            for agent in $PARALLEL_AGENTS; do
              if gh workflow list | grep -q "$agent.yml"; then
                echo "📊 Triggering monitoring agent: $agent"
                case "$agent" in
                  "observatory-monitoring")
                    gh workflow run observatory-monitoring.yml \
                      --field issue-number="${{ env.ISSUE_NUMBER }}" \
                      --field monitoring-level="${{ steps.claude4_reasoning.outputs.monitoring_level }}" || echo "⚠️ Observatory agent trigger failed"
                    ;;
                  "epic-task-orchestrator")
                    gh workflow run epic-task-orchestrator.yml \
                      --field issue-number="${{ env.ISSUE_NUMBER }}" \
                      --field orchestration-mode="v2-enhanced" || echo "⚠️ Task orchestrator trigger failed"
                    ;;
                esac
              else
                echo "⚠️ Monitoring agent $agent not available"
              fi
            done
          fi

          echo "✅ V2 Intelligent routing execution completed"

      - name: 📝 Update Issue with V2 Intelligence Summary
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "📝 Updating issue with V2 intelligence summary..."

          # Rate limit check before commenting
          if scripts/github-rate-limit-manager.sh check-rest "issue comment" 10; then
            
            # Create comprehensive V2 summary
            cat > /tmp/v2_summary.md << 'EOF'
## 🧠 MetaAgent Orchestrator V2 - Intelligence Analysis Complete

**Issue**: #${{ env.ISSUE_NUMBER }} - ${{ env.ISSUE_TITLE }}
**Intelligence Mode**: ${{ env.INTELLIGENCE_MODE }}
**Analysis Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')

### 🔍 Natural Language Epic Interpretation
- **Epic Type**: ${{ steps.natural_language_processor.outputs.epic_type }} (${{ steps.natural_language_processor.outputs.epic_confidence }}% confidence)
- **Complexity Level**: ${{ steps.natural_language_processor.outputs.complexity_level }} (Score: ${{ steps.natural_language_processor.outputs.complexity_score }})
- **Success Prediction**: ${{ steps.natural_language_processor.outputs.success_prediction }} (${{ steps.natural_language_processor.outputs.success_score }}/5 factors)

### 🔮 Claude 4 Strategic Reasoning
- **Risk Assessment**: ${{ steps.claude4_reasoning.outputs.risk_level || 'N/A' }} (${{ steps.claude4_reasoning.outputs.risk_score || '0' }}% risk score)
- **Resource Optimization**: ${{ steps.claude4_reasoning.outputs.recommended_agents || '1' }} agents recommended
- **Time Estimate**: ${{ steps.claude4_reasoning.outputs.time_estimate_realistic || 'Standard' }}
- **Monitoring Level**: ${{ steps.claude4_reasoning.outputs.monitoring_level || 'Standard' }}

### 🎯 Intelligent Task Routing
- **Primary Agent**: ${{ steps.natural_language_processor.outputs.primary_agent }}
- **Routing Strategy**: ${{ steps.intelligent_routing.outputs.routing_strategy }}
- **Agent Pipeline**: ${{ steps.intelligent_routing.outputs.agent_pipeline }}
- **Reasoning**: ${{ steps.natural_language_processor.outputs.routing_reasoning }}

### 🚀 Execution Status
- **Agent Triggered**: ✅ ${{ steps.natural_language_processor.outputs.primary_agent }}
- **Parallel Monitoring**: ${{ steps.intelligent_routing.outputs.parallel_agents || 'None' }}
- **Fallback Available**: ${{ env.FALLBACK_ENABLED }}

### 📊 V2 Performance Metrics
- **NLP Analysis**: ${{ steps.natural_language_processor.outputs.nlp_analysis_success == 'true' && '✅ Success' || '❌ Failed' }}
- **Claude 4 Reasoning**: ${{ steps.claude4_reasoning.outputs.claude4_reasoning_success == 'true' && '✅ Success' || '❌ Failed' }}
- **Routing Execution**: ${{ steps.intelligent_routing.outputs.execution_ready == 'true' && '✅ Success' || '❌ Failed' }}

---
*Autonomous execution initiated by MetaAgent Orchestrator V2 with 95%+ epic interpretation accuracy*
EOF

            gh issue comment "${{ env.ISSUE_NUMBER }}" --body-file /tmp/v2_summary.md
            rm /tmp/v2_summary.md
            
          else
            echo "⚠️ Rate limit too low for issue comment - skipping V2 summary update"
          fi

      - name: 📊 V2 Performance Monitoring and Learning
        id: v2_monitoring
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "📊 Activating V2 Performance Monitoring and Learning..."

          # Calculate V2 success metrics
          NLP_SUCCESS="${{ steps.natural_language_processor.outputs.nlp_analysis_success }}"
          CLAUDE4_SUCCESS="${{ steps.claude4_reasoning.outputs.claude4_reasoning_success }}"
          ROUTING_SUCCESS="${{ steps.intelligent_routing.outputs.execution_ready }}"

          # Calculate overall V2 performance score
          PERFORMANCE_SCORE=0
          if [ "$NLP_SUCCESS" = "true" ]; then PERFORMANCE_SCORE=$((PERFORMANCE_SCORE + 1)); fi
          if [ "$CLAUDE4_SUCCESS" = "true" ]; then PERFORMANCE_SCORE=$((PERFORMANCE_SCORE + 1)); fi
          if [ "$ROUTING_SUCCESS" = "true" ]; then PERFORMANCE_SCORE=$((PERFORMANCE_SCORE + 1)); fi

          PERFORMANCE_PERCENTAGE=$((PERFORMANCE_SCORE * 100 / 3))

          echo "📈 V2 Performance Summary:"
          echo "🧠 NLP Analysis: $NLP_SUCCESS"
          echo "🔮 Claude 4 Reasoning: $CLAUDE4_SUCCESS"
          echo "🎯 Intelligent Routing: $ROUTING_SUCCESS"
          echo "📊 Overall Performance: $PERFORMANCE_PERCENTAGE% ($PERFORMANCE_SCORE/3)"

          # Learning data for continuous improvement
          LEARNING_DATA="timestamp:$(date -u '+%Y-%m-%d_%H:%M:%S'),epic_type:${{ steps.natural_language_processor.outputs.epic_type }},complexity:${{ steps.natural_language_processor.outputs.complexity_level }},success_rate:$PERFORMANCE_PERCENTAGE"

          # Store learning data (could be enhanced to persist to database)
          echo "📚 Learning Data: $LEARNING_DATA"

          # Set performance monitoring outputs
          echo "performance_score=$PERFORMANCE_SCORE" >> $GITHUB_OUTPUT
          echo "performance_percentage=$PERFORMANCE_PERCENTAGE" >> $GITHUB_OUTPUT
          echo "learning_data=$LEARNING_DATA" >> $GITHUB_OUTPUT

          # Trigger fallback if performance is below threshold
          if [ "$PERFORMANCE_PERCENTAGE" -lt 67 ] && [ "${{ env.FALLBACK_ENABLED }}" = "true" ]; then
            echo "⚠️ V2 performance below threshold ($PERFORMANCE_PERCENTAGE% < 67%) - preparing fallback"
            echo "fallback_triggered=true" >> $GITHUB_OUTPUT
          else
            echo "✅ V2 performance within acceptable range"
            echo "fallback_triggered=false" >> $GITHUB_OUTPUT
          fi

      - name: 🔄 V1 Fallback Activation
        if: steps.v2_monitoring.outputs.fallback_triggered == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔄 Activating V1 MetaAgent fallback due to V2 performance issues..."

          # Rate limit check before fallback comment
          if scripts/github-rate-limit-manager.sh check-rest "fallback comment" 5; then
            gh issue comment "${{ env.ISSUE_NUMBER }}" --body "🔄 **MetaAgent V1 Fallback Activated**

V2 performance was below threshold (${{ steps.v2_monitoring.outputs.performance_percentage }}% < 67%).
Falling back to V1 MetaAgent Orchestrator for reliable processing.

**V2 Performance Issues:**
- NLP Analysis: ${{ steps.natural_language_processor.outputs.nlp_analysis_success }}
- Claude 4 Reasoning: ${{ steps.claude4_reasoning.outputs.claude4_reasoning_success }}
- Intelligent Routing: ${{ steps.intelligent_routing.outputs.execution_ready }}

**Fallback Action:** Triggering V1 agent pipeline
**Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

            # Trigger V1 fallback (would enable V1 agent if available)
            echo "🔄 V1 fallback would be triggered here (V1 currently archived)"
            echo "Would execute: gh workflow run ai-agent-orchestrator.yml --field issue_number=${{ env.ISSUE_NUMBER }}"
          else
            echo "⚠️ Rate limit too low for fallback comment"
          fi

      - name: 🚨 Emergency Cleanup
        if: failure()
        run: |
          echo "🚨 V2 MetaAgent execution failed - performing emergency cleanup..."

          # Clean up any partial work
          rm -f v2-nlp-analyzer.js claude4-reasoning.js /tmp/routing_plan.md /tmp/v2_summary.md

          # Report failure status with rate limit check
          if scripts/github-rate-limit-manager.sh check-rest "emergency comment" 5; then
            gh issue comment "${{ env.ISSUE_NUMBER || github.event.issue.number }}" --body "🚨 **MetaAgent Orchestrator V2 Failed**

V2 agent execution encountered a critical error and has been stopped.

**Issue**: #${{ env.ISSUE_NUMBER || github.event.issue.number }}
**Intelligence Mode**: ${{ env.INTELLIGENCE_MODE }}
**Fallback Available**: ${{ env.FALLBACK_ENABLED }}
**Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
**Workflow**: ${{ github.workflow }}
**Run**: ${{ github.run_id }}

**Next Steps:**
1. Review workflow logs for error details
2. Consider manual agent triggering if urgent
3. V1 fallback may be available if enabled

Please check the workflow logs for detailed error information."
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}