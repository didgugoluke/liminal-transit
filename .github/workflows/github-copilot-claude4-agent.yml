name: ü§ñ GitHub Copilot Claude 4 Agent

on:
  workflow_dispatch:
    inputs:
      agent_task:
        description: "Task for the GitHub Copilot Claude 4 Agent"
        required: true
        default: "hello-world-test"
        type: choice
        options:
          - "hello-world-test"
          - "code-generation"
          - "story-analysis"
      debug_mode:
        description: "Enable debug mode"
        required: false
        default: false
        type: boolean

jobs:
  github-copilot-claude4-agent:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: write

    steps:
      - name: üîÑ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚ö° Setup Rate Limiting
        run: |
          chmod +x scripts/github-rate-limit-manager.sh
          if ! scripts/github-rate-limit-manager.sh check; then
            echo "‚ùå Rate limits too low"
            scripts/github-rate-limit-manager.sh emergency "GitHub Copilot Claude 4 Agent"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: üì¶ Install Dependencies
        run: |
          npm install @octokit/rest @octokit/action @actions/core openai
          echo "‚úÖ Dependencies installed successfully"

      - name: ü§ñ GitHub Copilot Claude 4 Agent Analysis
        id: copilot-claude4-analysis
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          node -e "
          const core = require('@actions/core');
          const { Octokit } = require('@octokit/rest');

          async function runCopilotClaude4Agent() {
            try {
              console.log('üöÄ Starting GitHub Copilot Claude 4 Agent...');
              console.log('üìã Task:', '${{ github.event.inputs.agent_task }}');
              console.log('üîç Debug Mode:', '${{ github.event.inputs.debug_mode }}');
              
              const task = '${{ github.event.inputs.agent_task }}';
              
              if (task === 'hello-world-test') {
                console.log('‚úÖ Hello World Test - Creating basic validation files...');
                
                // Set outputs for next steps
                core.setOutput('task_type', 'hello-world');
                core.setOutput('requires_files', 'true');
                core.setOutput('success', 'true');
                
                console.log('‚úÖ GitHub Copilot Claude 4 Agent analysis completed successfully');
              } else {
                console.log('‚ö†Ô∏è Task type not yet implemented:', task);
                core.setOutput('success', 'false');
              }
              
            } catch (error) {
              console.error('‚ùå GitHub Copilot Claude 4 Agent error:', error.message);
              core.setOutput('success', 'false');
              process.exit(1);
            }
          }

          runCopilotClaude4Agent();
          "

      - name: üìù Create Hello World Files
        if: steps.copilot-claude4-analysis.outputs.requires_files == 'true'
        run: |
          echo "üî® Creating Hello World implementation files..."

          # Create TypeScript Hello World class
          mkdir -p src/copilot-hello
          cat > src/copilot-hello/index.ts << 'EOF'
          /**
           * GitHub Copilot + Claude 4 Hello World Implementation
           * Generated by: GitHub Copilot Claude 4 Agent
           * Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
           */

          export interface CopilotHelloOptions {
            greeting?: string;
            target?: string;
            timestamp?: boolean;
          }

          export class CopilotHelloWorld {
            private options: CopilotHelloOptions;
            
            constructor(options: CopilotHelloOptions = {}) {
              this.options = {
                greeting: 'Hello',
                target: 'GitHub Copilot + Claude 4 World',
                timestamp: true,
                ...options
              };
            }
            
            greet(): string {
              const message = \`\${this.options.greeting}, \${this.options.target}!\`;
              return this.options.timestamp ? 
                \`\${message} [\${new Date().toISOString()}]\` : 
                message;
            }
            
            getAgentInfo(): string {
              return 'Powered by GitHub Copilot + Claude 4 Agent Pipeline';
            }
          }
          EOF

          echo "‚úÖ TypeScript implementation created"

      - name: üîç Check for Changes
        id: git-check
        run: |
          git add -A
          if git diff --staged --quiet; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No changes detected"
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Changes detected"
            git status --porcelain
          fi

      - name: üöÄ Create Branch and Commit
        if: steps.git-check.outputs.no_changes == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configure git
          git config user.name "GitHub Copilot Claude 4 Agent"
          git config user.email "copilot-claude4-agent@noveli.sh"

          # Create feature branch
          BRANCH_NAME="copilot-claude4-hello-world-$(date +%s)"
          git checkout -b "$BRANCH_NAME"

          # Commit changes
          git add -A
          git commit -m "ü§ñ GitHub Copilot Claude 4 Hello World Implementation

          Generated by: GitHub Copilot Claude 4 Agent
          Task: ${{ github.event.inputs.agent_task }}
          Timestamp: $(date -u +'%Y-%m-%d %H:%M:%S UTC')

          Features:
          - TypeScript Hello World class with configurable options
          - GitHub Copilot + Claude 4 integration demonstration
          - Professional code structure following TypeScript best practices

          Files Created:
          - src/copilot-hello/index.ts - Main implementation

          This implementation demonstrates the enhanced capabilities of the 
          GitHub Copilot + Claude 4 agent pipeline for intelligent code generation."

          # Push branch
          git push origin "$BRANCH_NAME"

          # Store branch name for PR creation
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: üìã Create Pull Request
        if: steps.git-check.outputs.no_changes == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create PR using GitHub CLI (following proven development agent pattern)
          echo "üìù Creating pull request..."

          # Create the PR first WITHOUT labels (proven pattern)
          PR_URL=$(gh pr create \
            --title "ü§ñ GitHub Copilot Claude 4 Hello World Implementation" \
            --body "## GitHub Copilot + Claude 4 Agent Implementation

          **Generated by:** GitHub Copilot Claude 4 Agent  
          **Task:** ${{ github.event.inputs.agent_task }}  
          **Timestamp:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')

          ### üöÄ Implementation Summary

          This PR demonstrates the enhanced capabilities of the GitHub Copilot + Claude 4 agent pipeline:

          - **TypeScript Hello World Class**: Professional implementation with configurable options
          - **Intelligent Code Generation**: Leveraging Claude 4 for sophisticated code understanding
          - **GitHub Copilot Integration**: Enhanced development workflow automation
          - **Best Practices**: Following TypeScript and AI Native design patterns

          ### üìÅ Files Created

          - \`src/copilot-hello/index.ts\` - Main Hello World implementation with CopilotHelloWorld class

          ### üéØ Features

          - Configurable greeting, target, and timestamp options
          - Professional TypeScript class structure
          - Agent identification and metadata
          - Enterprise-ready code patterns

          ### üîç Testing

          This implementation can be tested by importing and instantiating the CopilotHelloWorld class:

          \`\`\`typescript
          import { CopilotHelloWorld } from './src/copilot-hello';
          const hello = new CopilotHelloWorld();
          console.log(hello.greet());
          \`\`\`

          ### ü§ñ Agent Pipeline

          Part of the GitHub Copilot + Claude 4 agent evolution demonstrating:
          - Natural language task understanding  
          - Intelligent code generation
          - Automated workflow orchestration
          - Professional development practices

          **Ready for review and merge!** ‚úÖ" \
            --head "$BRANCH_NAME" \
            --base main)
          
          echo "‚úÖ Pull request created: $PR_URL"
          
          # Extract PR number for label operations
          PR_NUMBER=$(echo "$PR_URL" | grep -o '[0-9]*$')
          echo "üîç Extracted PR number: $PR_NUMBER"
          
          # Now add labels separately (following proven development agent pattern)
          echo "üè∑Ô∏è Adding labels to PR..."
          
          # Define base labels for Copilot Claude 4 agent
          base_labels="ai-agent automated"
          context_labels="typescript hello-world"
          
          # Apply labels with error handling (proven pattern)
          all_labels="$base_labels $context_labels"
          for label in $all_labels; do
            if gh label list | grep -q "^$label"; then
              if gh pr edit "$PR_URL" --add-label "$label" 2>/dev/null; then
                echo "‚úÖ Added label: $label"
              else
                echo "‚ö†Ô∏è Failed to add label: $label (non-critical)"
              fi
            else
              echo "‚ÑπÔ∏è Label not found: $label (will skip)"
            fi
          done
          
          echo "‚úÖ Pull Request created successfully with labels"

      - name: üìä Workflow Summary
        if: always()
        run: |
          echo "üéØ GitHub Copilot Claude 4 Agent Workflow Complete"
          echo "üìã Task: ${{ github.event.inputs.agent_task }}"
          echo "üîç Debug Mode: ${{ github.event.inputs.debug_mode }}"
          echo "‚úÖ Analysis Success: ${{ steps.copilot-claude4-analysis.outputs.success }}"
          echo "üìù Changes Created: ${{ steps.git-check.outputs.no_changes == 'false' }}"

          if [ "${{ steps.git-check.outputs.no_changes }}" == "false" ]; then
            echo "üöÄ Branch: $BRANCH_NAME"
            echo "üìã PR Created: Yes"
          else
            echo "‚ö†Ô∏è No changes to commit"
          fi
