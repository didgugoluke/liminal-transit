name: üìã Epic Breakdown Agent - Story & Task Generator

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  epic-breakdown:
    runs-on: ubuntu-latest
    if: |
      (contains(github.event.comment.body, 'Epic breakdown agent') && contains(github.event.issue.labels.*.name, 'epic')) ||
      (contains(github.event.comment.body, 'Epic breakdown agent: force rebuild') && contains(github.event.issue.labels.*.name, 'epic'))
    
    steps:
      - name: üèóÔ∏è Checkout Repository
        uses: actions/checkout@v4
        
      - name: üìã Start Epic Breakdown
        run: |
          echo "Epic Breakdown Agent activated!"
          EPIC_NUMBER="${{ github.event.issue.number }}"
          EPIC_TITLE="${{ github.event.issue.title }}"
          
          # Check if this is a force rebuild
          FORCE_REBUILD=$(echo "${{ github.event.comment.body }}" | grep -c "force rebuild" || true)
          
          if [ "$FORCE_REBUILD" -gt 0 ]; then
            echo "Force rebuild requested - cleaning up existing Epic breakdown..."
            
            # Close existing Epic Stories and Tasks
            EXISTING_STORY_NUMBERS=$(gh issue list --label "epic-story" --search "Epic $EPIC_NUMBER Story" --json number --jq -r '.[].number')
            EXISTING_TASK_NUMBERS=$(gh issue list --label "epic-task" --search "Epic $EPIC_NUMBER Story" --json number --jq -r '.[].number')
            
            for story_num in $EXISTING_STORY_NUMBERS; do
              if [ -n "$story_num" ]; then
                gh issue close $story_num --reason "not planned" --comment "Closed for Epic rebuild - superseded by new breakdown"
                echo "Closed existing Story #$story_num"
              fi
            done
            
            for task_num in $EXISTING_TASK_NUMBERS; do
              if [ -n "$task_num" ]; then
                gh issue close $task_num --reason "not planned" --comment "Closed for Epic rebuild - superseded by new breakdown"
                echo "Closed existing Task #$task_num"
              fi
            done
            
            gh issue comment ${{ github.event.issue.number }} --body "üîÑ **Epic Breakdown Agent - Force Rebuild**
            
            **Epic**: $EPIC_TITLE (#$EPIC_NUMBER)
            **Action**: Cleaned up existing breakdown items
            **Status**: Proceeding with fresh Epic breakdown
            
            **Processing new Epic breakdown...**"
          else
            # Check if Epic has already been broken down
            EXISTING_STORIES=$(gh issue list --label "epic-story" --search "Epic $EPIC_NUMBER Story" --json number --jq length)
            EXISTING_TASKS=$(gh issue list --label "epic-task" --search "Epic $EPIC_NUMBER Story" --json number --jq length)
            
            if [ "$EXISTING_STORIES" -gt 0 ] || [ "$EXISTING_TASKS" -gt 0 ]; then
              echo "Epic $EPIC_NUMBER already has breakdown: $EXISTING_STORIES stories, $EXISTING_TASKS tasks"
              gh issue comment ${{ github.event.issue.number }} --body "‚ö†Ô∏è **Epic Breakdown Agent - Duplication Prevented**
              
              **Epic**: $EPIC_TITLE (#$EPIC_NUMBER)
              **Status**: Epic already broken down
              **Existing**: $EXISTING_STORIES Stories, $EXISTING_TASKS Tasks
              
              **Action**: Skipping breakdown to prevent duplication
              **Existing Epic Items**: View at https://github.com/users/didgugoluke/projects/1
              
              Use \`Epic breakdown agent: force rebuild\` to recreate (will close existing items first)."
              exit 0
            fi
            
            gh issue comment ${{ github.event.issue.number }} --body "üìã **Epic Breakdown Agent Activated**
            
            **Epic**: $EPIC_TITLE (#$EPIC_NUMBER)
            **Status**: Starting strategic breakdown into Stories and Tasks
            **Action**: Creating GitHub Project hierarchy with Observatory tracking
            **Safeguards**: ‚úÖ Duplication prevention active
            
            **Processing Epic breakdown...**"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üé≠ Create Epic 1 Stories
        id: create_stories
        run: |
          echo "Creating Story issues for Epic 1..."
          EPIC_NUMBER="${{ github.event.issue.number }}"
          
          # Double-check for existing stories before creation (unless force rebuild)
          FORCE_REBUILD=$(echo "${{ github.event.comment.body }}" | grep -c "force rebuild" || true)
          if [ "$FORCE_REBUILD" -eq 0 ]; then
            STORY_1_EXISTS=$(gh issue list --search "Epic $EPIC_NUMBER Story 1: Project Architecture" --json number --jq length)
            STORY_2_EXISTS=$(gh issue list --search "Epic $EPIC_NUMBER Story 2: Database Design" --json number --jq length)
            STORY_3_EXISTS=$(gh issue list --search "Epic $EPIC_NUMBER Story 3: API Design" --json number --jq length)
            
            if [ "$STORY_1_EXISTS" -gt 0 ] || [ "$STORY_2_EXISTS" -gt 0 ] || [ "$STORY_3_EXISTS" -gt 0 ]; then
              echo "Stories already exist for Epic $EPIC_NUMBER - aborting to prevent duplication"
              gh issue comment ${{ github.event.issue.number }} --body "üõ°Ô∏è **Duplication Safeguard Triggered**
              
              Existing Epic $EPIC_NUMBER Stories detected. Aborting creation to prevent duplicates.
              Use \`Epic breakdown agent: force rebuild\` if intentional recreation is needed."
              exit 1
            fi
          fi
          
          # Story 1: Project Architecture & Foundation
          STORY_1=$(gh issue create \
            --title "Epic 1 Story 1: Project Architecture & Foundation" \
            --body "## üé≠ Epic Story Implementation
          
          **Parent Epic**: #$EPIC_NUMBER
          **Story ID**: 1
          **Story Name**: Project Architecture & Foundation
          
          ## üìã Story Overview
          
          Establish the foundational architecture and project structure for NOVELI.SH, including TypeScript setup, modern tooling configuration, and AI Native development patterns.
          
          ## üéØ Story Goals
          
          - TypeScript project structure with proper configuration
          - Modern build tooling (Vite/esbuild integration)  
          - AI Native development patterns and conventions
          - Foundation for scalable codebase architecture
          
          ## üîó Dependencies
          
          - Parent Epic: #$EPIC_NUMBER
          - Prerequisite for all other Epic 1 stories
          
          ## üìä Implementation Status
          
          - [ ] Tasks created and assigned to AI agents
          - [ ] GitHub Project integration complete
          - [ ] Observatory tracking configured
          
          Ready for Task breakdown and AI agent execution." \
            --label "ai-agent,epic-story,P1")
          
          STORY_1_ID=$(echo $STORY_1 | grep -o '[0-9]*$')
          
          # Story 2: Database Design & Models
          STORY_2=$(gh issue create \
            --title "Epic 1 Story 2: Database Design & Models" \
            --body "## üé≠ Epic Story Implementation
          
          **Parent Epic**: #$EPIC_NUMBER
          **Story ID**: 2  
          **Story Name**: Database Design & Models
          
          ## üìã Story Overview
          
          Design and implement database schema, models, and data access patterns for the core platform, supporting user management, content organization, and AI agent coordination.
          
          ## üéØ Story Goals
          
          - Database schema design for users, content, AI agents
          - TypeScript models and interfaces
          - Data access layer with proper abstractions
          - Migration and seeding infrastructure
          
          ## üîó Dependencies
          
          - Parent Epic: #$EPIC_NUMBER  
          - Requires Story 1 (Project Architecture) completion
          
          ## üìä Implementation Status
          
          - [ ] Tasks created and assigned to AI agents
          - [ ] GitHub Project integration complete
          - [ ] Observatory tracking configured
          
          Ready for Task breakdown and AI agent execution." \
            --label "ai-agent,epic-story,P1")
          
          STORY_2_ID=$(echo $STORY_2 | grep -o '[0-9]*$')
          
          # Story 3: API Design & Core Endpoints  
          STORY_3=$(gh issue create \
            --title "Epic 1 Story 3: API Design & Core Endpoints" \
            --body "## üé≠ Epic Story Implementation
          
          **Parent Epic**: #$EPIC_NUMBER
          **Story ID**: 3
          **Story Name**: API Design & Core Endpoints
          
          ## üìã Story Overview
          
          Design and implement RESTful API endpoints for the core platform functionality, including authentication, user management, and content operations with proper validation and error handling.
          
          ## üéØ Story Goals
          
          - RESTful API design following OpenAPI specifications
          - Core endpoints for authentication and user management
          - Request validation and error handling middleware
          - API documentation and testing infrastructure
          
          ## üîó Dependencies
          
          - Parent Epic: #$EPIC_NUMBER
          - Requires Story 1 (Project Architecture) and Story 2 (Database Design)
          
          ## üìä Implementation Status
          
          - [ ] Tasks created and assigned to AI agents  
          - [ ] GitHub Project integration complete
          - [ ] Observatory tracking configured
          
          Ready for Task breakdown and AI agent execution." \
            --label "ai-agent,epic-story,P1")
          
          STORY_3_ID=$(echo $STORY_3 | grep -o '[0-9]*$')
          
          echo "Created Stories: #$STORY_1_ID, #$STORY_2_ID, #$STORY_3_ID"
          
          # Validate all stories were created successfully
          if [ -z "$STORY_1_ID" ] || [ -z "$STORY_2_ID" ] || [ -z "$STORY_3_ID" ]; then
            echo "ERROR: Failed to create all Epic Stories"
            gh issue comment ${{ github.event.issue.number }} --body "‚ùå **Epic Breakdown Failed**
            
            Failed to create all Epic Stories. Story creation incomplete:
            - Story 1 ID: $STORY_1_ID
            - Story 2 ID: $STORY_2_ID  
            - Story 3 ID: $STORY_3_ID
            
            Please retry Epic breakdown or investigate issue creation permissions."
            exit 1
          fi
          
          echo "story_ids=$STORY_1_ID,$STORY_2_ID,$STORY_3_ID" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚ö° Create Tasks for Each Story
        id: create_tasks
        run: |
          echo "Creating Task issues for Epic 1 Stories..."
          EPIC_NUMBER="${{ github.event.issue.number }}"
          IFS=',' read -ra STORIES <<< "${{ steps.create_stories.outputs.story_ids }}"
          
          # Validate Story IDs before proceeding
          if [ -z "${{ steps.create_stories.outputs.story_ids }}" ]; then
            echo "No story IDs found - cannot create tasks"
            gh issue comment ${{ github.event.issue.number }} --body "‚ö†Ô∏è **Task Creation Blocked**
            
            No valid Story IDs received from previous step. Task creation aborted to prevent orphaned tasks."
            exit 1
          fi
          
          # Check for existing tasks before creation
          EXISTING_TASKS=$(gh issue list --label "epic-task" --search "Epic $EPIC_NUMBER Story" --json number --jq length)
          if [ "$EXISTING_TASKS" -gt 0 ]; then
            echo "Tasks already exist for Epic $EPIC_NUMBER - checking for specific conflicts"
            # Allow creation only if we have valid story IDs and this is intentional
          fi
          
          STORY_1_ID="${STORIES[0]}"
          STORY_2_ID="${STORIES[1]}"  
          STORY_3_ID="${STORIES[2]}"
          
          ALL_TASK_IDS=""
          
          # Tasks for Story 1: Project Architecture & Foundation
          TASK_1_1=$(gh issue create \
            --title "Epic 1 Story 1 Task 1: TypeScript Configuration & Project Structure" \
            --body "## ‚ö° Epic Task Implementation
          
          **Parent Epic**: #$EPIC_NUMBER
          **Parent Story**: #$STORY_1_ID
          **Task ID**: 1.1
          **Task Description**: Set up TypeScript configuration and project structure
          
          ## ü§ñ AI Agent Assignment
          
          **Primary Agent**: CodeGen Agent
          **Supporting Agents**: Observatory Agent
          **Execution Mode**: Autonomous implementation
          
          ## ‚úÖ Success Criteria
          
          - [ ] tsconfig.json configured with strict settings
          - [ ] Project directory structure established  
          - [ ] Package.json with TypeScript dependencies
          - [ ] Basic build scripts configured
          
          ## üîó Dependencies
          
          - Parent Epic: #$EPIC_NUMBER
          - Parent Story: #$STORY_1_ID
          
          Ready for AI Agent autonomous execution." \
            --label "ai-agent,epic-task,P2")
          
          TASK_1_1_ID=$(echo $TASK_1_1 | grep -o '[0-9]*$')
          ALL_TASK_IDS="$ALL_TASK_IDS,$TASK_1_1_ID"
          
          TASK_1_2=$(gh issue create \
            --title "Epic 1 Story 1 Task 2: Modern Build Tooling Integration" \
            --body "## ‚ö° Epic Task Implementation
          
          **Parent Epic**: #$EPIC_NUMBER
          **Parent Story**: #$STORY_1_ID
          **Task ID**: 1.2
          **Task Description**: Integrate modern build tooling (Vite/esbuild)
          
          ## ü§ñ AI Agent Assignment
          
          **Primary Agent**: CodeGen Agent
          **Supporting Agents**: Observatory Agent
          **Execution Mode**: Autonomous implementation
          
          ## ‚úÖ Success Criteria
          
          - [ ] Vite configuration for TypeScript
          - [ ] Development server setup
          - [ ] Build optimization configured
          - [ ] Hot reload functionality working
          
          ## üîó Dependencies
          
          - Parent Epic: #$EPIC_NUMBER
          - Parent Story: #$STORY_1_ID
          - Previous Task: #$TASK_1_1_ID
          
          Ready for AI Agent autonomous execution." \
            --label "ai-agent,epic-task,P2")
          
          TASK_1_2_ID=$(echo $TASK_1_2 | grep -o '[0-9]*$')
          ALL_TASK_IDS="$ALL_TASK_IDS,$TASK_1_2_ID"
          
          # Tasks for Story 2: Database Design & Models
          TASK_2_1=$(gh issue create \
            --title "Epic 1 Story 2 Task 1: Database Schema Design" \
            --body "## ‚ö° Epic Task Implementation
          
          **Parent Epic**: #$EPIC_NUMBER
          **Parent Story**: #$STORY_2_ID
          **Task ID**: 2.1
          **Task Description**: Design database schema for core entities
          
          ## ü§ñ AI Agent Assignment
          
          **Primary Agent**: DataGov Agent
          **Supporting Agents**: CodeGen Agent, Observatory Agent
          **Execution Mode**: Autonomous implementation
          
          ## ‚úÖ Success Criteria
          
          - [ ] User entity schema designed
          - [ ] Content entity relationships mapped
          - [ ] AI agent coordination schema planned
          - [ ] Migration scripts structure defined
          
          ## üîó Dependencies
          
          - Parent Epic: #$EPIC_NUMBER
          - Parent Story: #$STORY_2_ID
          - Requires Story 1 completion
          
          Ready for AI Agent autonomous execution." \
            --label "ai-agent,epic-task,P2")
          
          TASK_2_1_ID=$(echo $TASK_2_1 | grep -o '[0-9]*$')
          ALL_TASK_IDS="$ALL_TASK_IDS,$TASK_2_1_ID"
          
          # Tasks for Story 3: API Design & Core Endpoints
          TASK_3_1=$(gh issue create \
            --title "Epic 1 Story 3 Task 1: API Specification Design" \
            --body "## ‚ö° Epic Task Implementation
          
          **Parent Epic**: #$EPIC_NUMBER
          **Parent Story**: #$STORY_3_ID
          **Task ID**: 3.1
          **Task Description**: Design OpenAPI specification for core endpoints
          
          ## ü§ñ AI Agent Assignment
          
          **Primary Agent**: CodeGen Agent
          **Supporting Agents**: DataGov Agent, Observatory Agent
          **Execution Mode**: Autonomous implementation
          
          ## ‚úÖ Success Criteria
          
          - [ ] OpenAPI 3.0 specification created
          - [ ] Authentication endpoints defined
          - [ ] User management endpoints specified
          - [ ] Content operation endpoints planned
          
          ## üîó Dependencies
          
          - Parent Epic: #$EPIC_NUMBER
          - Parent Story: #$STORY_3_ID
          - Requires Story 1 and Story 2 completion
          
          Ready for AI Agent autonomous execution." \
            --label "ai-agent,epic-task,P2")
          
          TASK_3_1_ID=$(echo $TASK_3_1 | grep -o '[0-9]*$')
          ALL_TASK_IDS="$ALL_TASK_IDS,$TASK_3_1_ID"
          
          # Remove leading comma
          ALL_TASK_IDS=$(echo $ALL_TASK_IDS | sed 's/^,//')
          echo "Created Tasks: $ALL_TASK_IDS"
          
          # Validate all tasks were created successfully
          TASK_COUNT=$(echo $ALL_TASK_IDS | tr ',' '\n' | wc -l)
          if [ "$TASK_COUNT" -lt 4 ]; then
            echo "ERROR: Expected 4 tasks but only created $TASK_COUNT"
            gh issue comment ${{ github.event.issue.number }} --body "‚ùå **Task Creation Incomplete**
            
            Expected 4 Epic Tasks but only created $TASK_COUNT.
            Created Task IDs: $ALL_TASK_IDS
            
            Epic breakdown partially failed. Please retry or investigate task creation issues."
            exit 1
          fi
          
          echo "task_ids=$ALL_TASK_IDS" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üîó Add Items to GitHub Project
        run: |
          echo "Adding Epic breakdown items to GitHub Project..."
          EPIC_NUMBER="${{ github.event.issue.number }}"
          STORY_IDS="${{ steps.create_stories.outputs.story_ids }}"
          TASK_IDS="${{ steps.create_tasks.outputs.task_ids }}"
          
          # Validate we have items to add
          if [ -z "$STORY_IDS" ] || [ -z "$TASK_IDS" ]; then
            echo "ERROR: Missing Story or Task IDs for project integration"
            gh issue comment ${{ github.event.issue.number }} --body "‚ö†Ô∏è **Project Integration Skipped**
            
            Cannot add items to GitHub Project - missing Story or Task IDs.
            Stories: $STORY_IDS
            Tasks: $TASK_IDS
            
            Epic breakdown items created but not added to project board."
            exit 0
          fi
          
          # Track success/failure of project additions
          ADDED_STORIES=0
          FAILED_STORIES=0
          ADDED_TASKS=0
          FAILED_TASKS=0
          
          # Add Stories to project
          IFS=',' read -ra STORIES <<< "$STORY_IDS"
          for story_id in "${STORIES[@]}"; do
            if [ -n "$story_id" ]; then
              if gh project item-add 1 --owner didgugoluke --url "https://github.com/didgugoluke/liminal-transit/issues/$story_id" 2>/dev/null; then
                echo "‚úÖ Added Story #$story_id to GitHub Project"
                ADDED_STORIES=$((ADDED_STORIES + 1))
              else
                echo "‚ùå Failed to add Story #$story_id to GitHub Project"
                FAILED_STORIES=$((FAILED_STORIES + 1))
              fi
            fi
          done
          
          # Add Tasks to project  
          IFS=',' read -ra TASKS <<< "$TASK_IDS"
          for task_id in "${TASKS[@]}"; do
            if [ -n "$task_id" ]; then
              if gh project item-add 1 --owner didgugoluke --url "https://github.com/didgugoluke/liminal-transit/issues/$task_id" 2>/dev/null; then
                echo "‚úÖ Added Task #$task_id to GitHub Project"
                ADDED_TASKS=$((ADDED_TASKS + 1))
              else
                echo "‚ùå Failed to add Task #$task_id to GitHub Project"
                FAILED_TASKS=$((FAILED_TASKS + 1))
              fi
            fi
          done
          
          # Report project integration results
          if [ "$FAILED_STORIES" -gt 0 ] || [ "$FAILED_TASKS" -gt 0 ]; then
            PROJECT_STATUS="‚ö†Ô∏è **Partial Success** - Some items failed to add to project"
          else
            PROJECT_STATUS="‚úÖ **Full Success** - All items added to project"
          fi
          
          # Final status comment
          gh issue comment ${{ github.event.issue.number }} --body "‚ö° **Epic 1 Breakdown Complete**
          
          **Epic**: #$EPIC_NUMBER  
          **Stories Created**: $STORY_IDS
          **Tasks Created**: $TASK_IDS
          
          ## üéØ **Ready for AI Agent Execution**
          
          **$PROJECT_STATUS**
          **Project Integration**: Stories: $ADDED_STORIES‚úÖ $FAILED_STORIES‚ùå | Tasks: $ADDED_TASKS‚úÖ $FAILED_TASKS‚ùå
          **Observatory**: Tracking configured for Epic progress
          **AI Agents**: Ready for autonomous task execution
          
          **Epic Structure**: Epic ‚Üí Stories ‚Üí Tasks
          **Project Board**: https://github.com/users/didgugoluke/projects/1
          **Safeguards**: ‚úÖ Duplication prevention active
          
          Epic breakdown and orchestration complete! üöÄ"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
