name: üìã Epic Breakdown Agent - AI Native Story & Task Generator

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  epic-breakdown:
    runs-on: ubuntu-latest
    if: |
      (contains(github.event.comment.body, 'Epic breakdown agent') && contains(github.event.issue.labels.*.name, 'epic')) ||
      (contains(github.event.comment.body, 'Epic breakdown agent: force rebuild') && contains(github.event.issue.labels.*.name, 'epic'))

    steps:
      - name: üèóÔ∏è Checkout Repository
        uses: actions/checkout@v4

      - name: üß† AI Native Epic Analysis
        id: epic_analysis
        run: |
          echo "üß† AI Native Epic Analysis starting..."
          EPIC_NUMBER="${{ github.event.issue.number }}"
          EPIC_TITLE="${{ github.event.issue.title }}"

          # Extract Epic content for AI analysis
          EPIC_BODY=$(gh issue view $EPIC_NUMBER --json body --jq '.body // ""')

          # Determine Epic type and complexity
          if echo "$EPIC_TITLE" | grep -qi "Epic 1.*Core Platform Foundation"; then
            EPIC_TYPE="foundation"
            BREAKDOWN_MODE="hardcoded_stable"
            echo "üèóÔ∏è Epic 1 detected - using stable hardcoded breakdown"
          elif echo "$EPIC_TITLE" | grep -qi "Epic [2-5]"; then
            EPIC_TYPE="development"
            BREAKDOWN_MODE="hybrid_template"
            echo "üîß Development Epic detected - using hybrid template approach"
          else
            EPIC_TYPE="feature"
            BREAKDOWN_MODE="ai_native_dynamic"
            echo "ü§ñ Feature Epic detected - using full AI Native dynamic generation"
          fi

          # AI Native content extraction
          EPIC_COMPLEXITY=$(echo "$EPIC_BODY" | wc -w || echo "0")
          if [ "$EPIC_COMPLEXITY" -gt 500 ]; then
            STORY_COUNT="4-6"
            TASK_MULTIPLIER="3"
          elif [ "$EPIC_COMPLEXITY" -gt 200 ]; then
            STORY_COUNT="3-4"
            TASK_MULTIPLIER="2"
          else
            STORY_COUNT="2-3"
            TASK_MULTIPLIER="2"
          fi

          # Extract key requirements using AI pattern recognition
          KEY_REQUIREMENTS=$(echo "$EPIC_BODY" | grep -E "(Requirements?|Goals?|Objectives?|Must have|Should have)" -A 3 2>/dev/null || echo "Standard implementation requirements")
          TECHNICAL_STACK=$(echo "$EPIC_BODY" | grep -E "(Technology|Tech stack|Framework|Library|Tool)" -A 2 2>/dev/null || echo "React, TypeScript, Node.js")          echo "epic_type=$EPIC_TYPE" >> $GITHUB_OUTPUT
          echo "breakdown_mode=$BREAKDOWN_MODE" >> $GITHUB_OUTPUT
          echo "story_count=$STORY_COUNT" >> $GITHUB_OUTPUT
          echo "task_multiplier=$TASK_MULTIPLIER" >> $GITHUB_OUTPUT
          echo "key_requirements<<EOF" >> $GITHUB_OUTPUT
          echo "$KEY_REQUIREMENTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "technical_stack<<EOF" >> $GITHUB_OUTPUT
          echo "$TECHNICAL_STACK" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üìã Start Epic Breakdown
        run: |
          echo "Epic Breakdown Agent activated!"
          EPIC_NUMBER="${{ github.event.issue.number }}"
          EPIC_TITLE="${{ github.event.issue.title }}"
          BREAKDOWN_MODE="${{ steps.epic_analysis.outputs.breakdown_mode }}"

          # Check if this is a force rebuild
          FORCE_REBUILD=$(echo "${{ github.event.comment.body }}" | grep -c "force rebuild" || true)

          if [ "$FORCE_REBUILD" -gt 0 ]; then
            echo "Force rebuild requested - cleaning up existing Epic breakdown..."
            
            # Close existing Epic Stories and Tasks
            EXISTING_STORY_NUMBERS=$(gh issue list --label "epic-story" --search "Epic $EPIC_NUMBER Story" --json number --jq '.[].number')
            EXISTING_TASK_NUMBERS=$(gh issue list --label "epic-task" --search "Epic $EPIC_NUMBER Story" --json number --jq '.[].number')
            
            for story_num in $EXISTING_STORY_NUMBERS; do
              if [ -n "$story_num" ]; then
                gh issue close $story_num --reason "not planned" --comment "Closed for Epic rebuild - superseded by new AI Native breakdown"
                echo "Closed existing Story #$story_num"
              fi
            done
            
            for task_num in $EXISTING_TASK_NUMBERS; do
              if [ -n "$task_num" ]; then
                gh issue close $task_num --reason "not planned" --comment "Closed for Epic rebuild - superseded by new AI Native breakdown"
                echo "Closed existing Task #$task_num"
              fi
            done
            
            gh issue comment ${{ github.event.issue.number }} --body "üîÑ **AI Native Epic Breakdown Agent - Force Rebuild**
            
            **Epic**: $EPIC_TITLE (#$EPIC_NUMBER)
            **Mode**: $BREAKDOWN_MODE
            **Action**: Cleaned up existing breakdown items
            **Status**: Proceeding with fresh AI Native Epic breakdown
            
            **Processing new Epic breakdown...**"
          else
            # Check if Epic has already been broken down
            EXISTING_STORIES=$(gh issue list --label "epic-story" --search "Epic $EPIC_NUMBER Story" --json number --jq length)
            EXISTING_TASKS=$(gh issue list --label "epic-task" --search "Epic $EPIC_NUMBER Story" --json number --jq length)
            
            if [ "$EXISTING_STORIES" -gt 0 ] || [ "$EXISTING_TASKS" -gt 0 ]; then
              echo "Epic $EPIC_NUMBER already has breakdown: $EXISTING_STORIES stories, $EXISTING_TASKS tasks"
              gh issue comment ${{ github.event.issue.number }} --body "‚ö†Ô∏è **AI Native Epic Breakdown Agent - Duplication Prevented**
              
              **Epic**: $EPIC_TITLE (#$EPIC_NUMBER)
              **Status**: Epic already broken down
              **Existing**: $EXISTING_STORIES Stories, $EXISTING_TASKS Tasks
              **Mode**: $BREAKDOWN_MODE
              
              **Action**: Skipping breakdown to prevent duplication
              **Existing Epic Items**: View at https://github.com/users/didgugoluke/projects/1
              
              Use \`Epic breakdown agent: force rebuild\` to recreate (will close existing items first)."
              exit 0
            fi
            
            gh issue comment ${{ github.event.issue.number }} --body "üìã **AI Native Epic Breakdown Agent Activated**
            
            **Epic**: $EPIC_TITLE (#$EPIC_NUMBER)
            **Mode**: $BREAKDOWN_MODE (AI optimized for Epic type)
            **Status**: Starting strategic breakdown into Stories and Tasks
            **Action**: Creating GitHub Project hierarchy with Observatory tracking
            **Safeguards**: ‚úÖ Duplication prevention active
            
            **Processing AI Native Epic breakdown...**"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üé≠ Create Epic Stories (Multi-Mode AI Native)
        id: create_stories
        run: |
          echo "Creating Story issues with AI Native approach..."
          EPIC_NUMBER="${{ github.event.issue.number }}"
          EPIC_TITLE="${{ github.event.issue.title }}"
          BREAKDOWN_MODE="${{ steps.epic_analysis.outputs.breakdown_mode }}"
          EPIC_TYPE="${{ steps.epic_analysis.outputs.epic_type }}"

          # Double-check for existing stories before creation (unless force rebuild)
          FORCE_REBUILD=$(echo "${{ github.event.comment.body }}" | grep -c "force rebuild" || true)
          if [ "$FORCE_REBUILD" -eq 0 ]; then
            EXISTING_STORIES=$(gh issue list --label "epic-story" --search "Epic $EPIC_NUMBER Story" --json number --jq length)
            if [ "$EXISTING_STORIES" -gt 0 ]; then
              echo "Stories already exist for Epic $EPIC_NUMBER - aborting to prevent duplication"
              gh issue comment ${{ github.event.issue.number }} --body "üõ°Ô∏è **Duplication Safeguard Triggered**
              
              Existing Epic $EPIC_NUMBER Stories detected. Aborting creation to prevent duplicates.
              Use \`Epic breakdown agent: force rebuild\` if intentional recreation is needed."
              exit 1
            fi
          fi

          # Route to appropriate breakdown mode
          case "$BREAKDOWN_MODE" in
            "hardcoded_stable")
              echo "üèóÔ∏è Using stable hardcoded breakdown for Epic 1..."
              # Story 1: Project Architecture & Foundation
              STORY_1=$(gh issue create \
                --title "Epic 1 Story 1: Project Architecture & Foundation" \
                --body "## üé≠ Epic Story Implementation

              **Parent Epic**: #$EPIC_NUMBER
              **Story ID**: 1
              **Story Name**: Project Architecture & Foundation
              **Breakdown Mode**: Hardcoded Stable (Epic 1)

              ## üìã Story Overview

              Establish the foundational architecture and project structure for NOVELI.SH, including TypeScript setup, modern tooling configuration, and AI Native development patterns.

              ## üéØ Story Goals

              - TypeScript project structure with proper configuration
              - Modern build tooling (Vite/esbuild integration)  
              - AI Native development patterns and conventions
              - Foundation for scalable codebase architecture

              ## üîó Dependencies

              - Parent Epic: #$EPIC_NUMBER
              - Prerequisite for all other Epic 1 stories

              ## üìä Implementation Status

              - [ ] Tasks created and assigned to AI agents
              - [ ] GitHub Project integration complete
              - [ ] Observatory tracking configured

              Ready for Task breakdown and AI agent execution." \
                --label "ai-agent,epic-story,P1")

              STORY_1_ID=$(echo $STORY_1 | grep -o '[0-9]*$')

              # Story 2: Database Design & Models
              STORY_2=$(gh issue create \
                --title "Epic 1 Story 2: Database Design & Models" \
                --body "## üé≠ Epic Story Implementation

              **Parent Epic**: #$EPIC_NUMBER
              **Story ID**: 2  
              **Story Name**: Database Design & Models
              **Breakdown Mode**: Hardcoded Stable (Epic 1)

              ## üìã Story Overview

              Design and implement database schema, models, and data access patterns for the core platform, supporting user management, content organization, and AI agent coordination.

              ## üéØ Story Goals

              - Database schema design for users, content, AI agents
              - TypeScript models and interfaces
              - Data access layer with proper abstractions
              - Migration and seeding infrastructure

              ## üîó Dependencies

              - Parent Epic: #$EPIC_NUMBER  
              - Requires Story 1 (Project Architecture) completion

              ## üìä Implementation Status

              - [ ] Tasks created and assigned to AI agents
              - [ ] GitHub Project integration complete
              - [ ] Observatory tracking configured

              Ready for Task breakdown and AI agent execution." \
                --label "ai-agent,epic-story,P1")

              STORY_2_ID=$(echo $STORY_2 | grep -o '[0-9]*$')

              # Story 3: API Design & Core Endpoints  
              STORY_3=$(gh issue create \
                --title "Epic 1 Story 3: API Design & Core Endpoints" \
                --body "## üé≠ Epic Story Implementation

              **Parent Epic**: #$EPIC_NUMBER
              **Story ID**: 3
              **Story Name**: API Design & Core Endpoints
              **Breakdown Mode**: Hardcoded Stable (Epic 1)

              ## üìã Story Overview

              Design and implement RESTful API endpoints for the core platform functionality, including authentication, user management, and content operations with proper validation and error handling.

              ## üéØ Story Goals

              - RESTful API design following OpenAPI specifications
              - Core endpoints for authentication and user management
              - Request validation and error handling middleware
              - API documentation and testing infrastructure

              ## üîó Dependencies

              - Parent Epic: #$EPIC_NUMBER
              - Requires Story 1 (Project Architecture) and Story 2 (Database Design)

              ## üìä Implementation Status

              - [ ] Tasks created and assigned to AI agents  
              - [ ] GitHub Project integration complete
              - [ ] Observatory tracking configured

              Ready for Task breakdown and AI agent execution." \
                --label "ai-agent,epic-story,P1")

              STORY_3_ID=$(echo $STORY_3 | grep -o '[0-9]*$')
              ALL_STORY_IDS="$STORY_1_ID,$STORY_2_ID,$STORY_3_ID"
              ;;

            "hybrid_template")
              echo "üîß Using hybrid template approach for development Epic..."
              # Extract key requirements for template population
              KEY_REQS="${{ steps.epic_analysis.outputs.key_requirements }}"
              TECH_STACK="${{ steps.epic_analysis.outputs.technical_stack }}"
              
              # Generate 3-4 stories based on Epic content
              STORY_1=$(gh issue create \
                --title "Epic $EPIC_NUMBER Story 1: Architecture & Setup" \
                --body "## üé≠ Epic Story Implementation (Hybrid Template)

              **Parent Epic**: #$EPIC_NUMBER
              **Story ID**: 1
              **Breakdown Mode**: Hybrid Template (AI Enhanced)

              ## üìã Story Overview (AI Generated)

              Establish the foundational architecture for this Epic based on:
              $KEY_REQS

              ## üéØ Story Goals (Tech Stack: $TECH_STACK)

              - Architecture design aligned with Epic requirements
              - Technology stack integration and setup
              - Foundation patterns for Epic implementation
              - Preparation for subsequent story development

              ## üîó Dependencies

              - Parent Epic: #$EPIC_NUMBER
              - Foundation prerequisite for Epic stories

              Ready for AI Agent task breakdown and execution." \
                --label "ai-agent,epic-story,P2")

              STORY_1_ID=$(echo $STORY_1 | grep -o '[0-9]*$')

              STORY_2=$(gh issue create \
                --title "Epic $EPIC_NUMBER Story 2: Core Implementation" \
                --body "## üé≠ Epic Story Implementation (Hybrid Template)

              **Parent Epic**: #$EPIC_NUMBER
              **Story ID**: 2
              **Breakdown Mode**: Hybrid Template (AI Enhanced)

              ## üìã Story Overview (AI Generated)

              Implement core functionality based on Epic requirements:
              $KEY_REQS

              ## üéØ Story Goals

              - Core feature implementation
              - Business logic development
              - Integration with existing systems
              - Quality assurance and testing

              ## üîó Dependencies

              - Parent Epic: #$EPIC_NUMBER
              - Requires Story 1 completion

              Ready for AI Agent task breakdown and execution." \
                --label "ai-agent,epic-story,P2")

              STORY_2_ID=$(echo $STORY_2 | grep -o '[0-9]*$')

              STORY_3=$(gh issue create \
                --title "Epic $EPIC_NUMBER Story 3: Integration & Polish" \
                --body "## üé≠ Epic Story Implementation (Hybrid Template)

              **Parent Epic**: #$EPIC_NUMBER
              **Story ID**: 3
              **Breakdown Mode**: Hybrid Template (AI Enhanced)

              ## üìã Story Overview (AI Generated)

              Complete Epic implementation with integration and polish based on:
              $KEY_REQS

              ## üéØ Story Goals

              - System integration and validation
              - User experience optimization
              - Performance tuning and monitoring
              - Documentation and deployment

              ## üîó Dependencies

              - Parent Epic: #$EPIC_NUMBER
              - Requires Stories 1 and 2 completion

              Ready for AI Agent task breakdown and execution." \
                --label "ai-agent,epic-story,P2")

              STORY_3_ID=$(echo $STORY_3 | grep -o '[0-9]*$')
              ALL_STORY_IDS="$STORY_1_ID,$STORY_2_ID,$STORY_3_ID"
              ;;

            "ai_native_dynamic")
              echo "ü§ñ Using full AI Native dynamic generation..."
              # Extract Epic content for AI analysis
              EPIC_BODY=$(gh issue view $EPIC_NUMBER --json body --jq '.body')
              
              # AI Native story extraction based on Epic complexity and content
              STORY_COUNT_TARGET=$(echo "${{ steps.epic_analysis.outputs.story_count }}" | cut -d'-' -f1)
              
              # Generate stories dynamically based on Epic content analysis
              STORY_1=$(gh issue create \
                --title "Epic $EPIC_NUMBER Story 1: AI Analyzed Foundation" \
                --body "## üé≠ Epic Story Implementation (AI Native Dynamic)

              **Parent Epic**: #$EPIC_NUMBER
              **Story ID**: 1
              **Breakdown Mode**: AI Native Dynamic (Fully Generated)

              ## üìã Story Overview (AI Generated from Epic Analysis)

              $(echo \"$EPIC_BODY\" | head -n 5 | tail -n 3)

              ## üéØ AI Extracted Goals

              Based on Epic analysis:
              ${{ steps.epic_analysis.outputs.key_requirements }}

              ## üîß Technology Integration

              ${{ steps.epic_analysis.outputs.technical_stack }}

              ## üîó Dependencies

              - Parent Epic: #$EPIC_NUMBER
              - AI identified as foundation story

              Ready for AI Agent autonomous task generation and execution." \
                --label "ai-agent,epic-story,P3")

              STORY_1_ID=$(echo $STORY_1 | grep -o '[0-9]*$')

              STORY_2=$(gh issue create \
                --title "Epic $EPIC_NUMBER Story 2: AI Analyzed Implementation" \
                --body "## üé≠ Epic Story Implementation (AI Native Dynamic)

              **Parent Epic**: #$EPIC_NUMBER
              **Story ID**: 2
              **Breakdown Mode**: AI Native Dynamic (Fully Generated)

              ## üìã Story Overview (AI Generated)

              Implementation story generated from Epic content analysis and complexity assessment.

              ## üéØ AI Extracted Implementation Goals

              - Core functionality based on Epic requirements
              - Technical implementation aligned with project architecture
              - Integration patterns for Epic completion

              ## üîó Dependencies

              - Parent Epic: #$EPIC_NUMBER
              - Requires AI analyzed foundation completion

              Ready for AI Agent autonomous task generation and execution." \
                --label "ai-agent,epic-story,P3")

              STORY_2_ID=$(echo $STORY_2 | grep -o '[0-9]*$')
              ALL_STORY_IDS="$STORY_1_ID,$STORY_2_ID"
              ;;

            *)
              echo "Unknown breakdown mode: $BREAKDOWN_MODE"
              exit 1
              ;;
          esac

          echo "Created Stories with mode $BREAKDOWN_MODE: $ALL_STORY_IDS"

          # Validate all stories were created successfully
          STORY_ARRAY=(${ALL_STORY_IDS//,/ })
          ACTUAL_COUNT=${#STORY_ARRAY[@]}
          if [ "$ACTUAL_COUNT" -lt 2 ]; then
            echo "ERROR: Failed to create minimum stories (got $ACTUAL_COUNT)"
            gh issue comment ${{ github.event.issue.number }} --body "‚ùå **AI Native Epic Breakdown Failed**
            
            Failed to create minimum Epic Stories. Story creation incomplete.
            Mode: $BREAKDOWN_MODE
            Created: $ALL_STORY_IDS
            
            Please retry Epic breakdown or investigate issue creation permissions."
            exit 1
          fi

          echo "story_ids=$ALL_STORY_IDS" >> $GITHUB_OUTPUT
          echo "breakdown_mode=$BREAKDOWN_MODE" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚ö° Create Tasks for Each Story (AI Native Multi-Mode)
        id: create_tasks
        run: |
          echo "Creating Task issues with AI Native approach..."
          EPIC_NUMBER="${{ github.event.issue.number }}"
          BREAKDOWN_MODE="${{ steps.create_stories.outputs.breakdown_mode }}"
          IFS=',' read -ra STORIES <<< "${{ steps.create_stories.outputs.story_ids }}"

          # Validate Story IDs before proceeding
          if [ -z "${{ steps.create_stories.outputs.story_ids }}" ]; then
            echo "No story IDs found - cannot create tasks"
            gh issue comment ${{ github.event.issue.number }} --body "‚ö†Ô∏è **AI Native Task Creation Blocked**
            
            No valid Story IDs received from previous step. Task creation aborted to prevent orphaned tasks."
            exit 1
          fi

          # Check for existing tasks before creation
          EXISTING_TASKS=$(gh issue list --label "epic-task" --search "Epic $EPIC_NUMBER Story" --json number --jq length)
          if [ "$EXISTING_TASKS" -gt 0 ]; then
            echo "Tasks already exist for Epic $EPIC_NUMBER - checking for specific conflicts"
            # Allow creation only if we have valid story IDs and this is intentional
          fi

          ALL_TASK_IDS=""
          TASK_MULTIPLIER="${{ steps.epic_analysis.outputs.task_multiplier }}"

          # Create tasks based on breakdown mode
          case "$BREAKDOWN_MODE" in
            "hardcoded_stable")
              echo "üèóÔ∏è Creating hardcoded stable tasks for Epic 1..."
              
              STORY_1_ID="${STORIES[0]}"
              STORY_2_ID="${STORIES[1]}"  
              STORY_3_ID="${STORIES[2]}"

              # Tasks for Story 1: Project Architecture & Foundation
              TASK_1_1=$(gh issue create \
                --title "Epic 1 Story 1 Task 1: TypeScript Configuration & Project Structure" \
                --body "## ‚ö° Epic Task Implementation

              **Parent Epic**: #$EPIC_NUMBER
              **Parent Story**: #$STORY_1_ID
              **Task ID**: 1.1
              **Breakdown Mode**: Hardcoded Stable (Epic 1)

              ## ü§ñ AI Agent Assignment

              **Primary Agent**: CodeGen Agent
              **Supporting Agents**: Observatory Agent
              **Execution Mode**: Autonomous implementation

              ## ‚úÖ Success Criteria

              - [ ] tsconfig.json configured with strict settings
              - [ ] Project directory structure established  
              - [ ] Package.json with TypeScript dependencies
              - [ ] Basic build scripts configured

              ## üîó Dependencies

              - Parent Epic: #$EPIC_NUMBER
              - Parent Story: #$STORY_1_ID

              Ready for AI Agent autonomous execution." \
                --label "ai-agent,epic-task,P2")

              TASK_1_1_ID=$(echo $TASK_1_1 | grep -o '[0-9]*$')
              ALL_TASK_IDS="$TASK_1_1_ID"

              TASK_1_2=$(gh issue create \
                --title "Epic 1 Story 1 Task 2: Modern Build Tooling Integration" \
                --body "## ‚ö° Epic Task Implementation

              **Parent Epic**: #$EPIC_NUMBER
              **Parent Story**: #$STORY_1_ID
              **Task ID**: 1.2
              **Breakdown Mode**: Hardcoded Stable (Epic 1)

              ## ü§ñ AI Agent Assignment

              **Primary Agent**: CodeGen Agent
              **Supporting Agents**: Observatory Agent
              **Execution Mode**: Autonomous implementation

              ## ‚úÖ Success Criteria

              - [ ] Vite configuration for TypeScript
              - [ ] Development server setup
              - [ ] Build optimization configured
              - [ ] Hot reload functionality working

              ## üîó Dependencies

              - Parent Epic: #$EPIC_NUMBER
              - Parent Story: #$STORY_1_ID
              - Previous Task: #$TASK_1_1_ID

              Ready for AI Agent autonomous execution." \
                --label "ai-agent,epic-task,P2")

              TASK_1_2_ID=$(echo $TASK_1_2 | grep -o '[0-9]*$')
              ALL_TASK_IDS="$ALL_TASK_IDS,$TASK_1_2_ID"

              # Tasks for Story 2: Database Design & Models
              TASK_2_1=$(gh issue create \
                --title "Epic 1 Story 2 Task 1: Database Schema Design" \
                --body "## ‚ö° Epic Task Implementation

              **Parent Epic**: #$EPIC_NUMBER
              **Parent Story**: #$STORY_2_ID
              **Task ID**: 2.1
              **Breakdown Mode**: Hardcoded Stable (Epic 1)

              ## ü§ñ AI Agent Assignment

              **Primary Agent**: DataGov Agent
              **Supporting Agents**: CodeGen Agent, Observatory Agent
              **Execution Mode**: Autonomous implementation

              ## ‚úÖ Success Criteria

              - [ ] User entity schema designed
              - [ ] Content entity relationships mapped
              - [ ] AI agent coordination schema planned
              - [ ] Migration scripts structure defined

              ## üîó Dependencies

              - Parent Epic: #$EPIC_NUMBER
              - Parent Story: #$STORY_2_ID
              - Requires Story 1 completion

              Ready for AI Agent autonomous execution." \
                --label "ai-agent,epic-task,P2")

              TASK_2_1_ID=$(echo $TASK_2_1 | grep -o '[0-9]*$')
              ALL_TASK_IDS="$ALL_TASK_IDS,$TASK_2_1_ID"

              # Tasks for Story 3: API Design & Core Endpoints
              TASK_3_1=$(gh issue create \
                --title "Epic 1 Story 3 Task 1: API Specification Design" \
                --body "## ‚ö° Epic Task Implementation

              **Parent Epic**: #$EPIC_NUMBER
              **Parent Story**: #$STORY_3_ID
              **Task ID**: 3.1
              **Breakdown Mode**: Hardcoded Stable (Epic 1)

              ## ü§ñ AI Agent Assignment

              **Primary Agent**: CodeGen Agent
              **Supporting Agents**: DataGov Agent, Observatory Agent
              **Execution Mode**: Autonomous implementation

              ## ‚úÖ Success Criteria

              - [ ] OpenAPI 3.0 specification created
              - [ ] Authentication endpoints defined
              - [ ] User management endpoints specified
              - [ ] Content operation endpoints planned

              ## üîó Dependencies

              - Parent Epic: #$EPIC_NUMBER
              - Parent Story: #$STORY_3_ID
              - Requires Story 1 and Story 2 completion

              Ready for AI Agent autonomous execution." \
                --label "ai-agent,epic-task,P2")

              TASK_3_1_ID=$(echo $TASK_3_1 | grep -o '[0-9]*$')
              ALL_TASK_IDS="$ALL_TASK_IDS,$TASK_3_1_ID"
              ;;

            "hybrid_template"|"ai_native_dynamic")
              echo "ü§ñ Creating AI Native dynamic tasks..."
              STORY_COUNTER=1
              
              for story_id in "${STORIES[@]}"; do
                if [ -n "$story_id" ]; then
                  # Generate tasks dynamically based on story content
                  for task_num in $(seq 1 $TASK_MULTIPLIER); do
                    TASK_TITLE="Epic $EPIC_NUMBER Story $STORY_COUNTER Task $task_num: AI Generated Implementation"
                    
                    TASK_RESULT=$(gh issue create \
                      --title "$TASK_TITLE" \
                      --body "## ‚ö° Epic Task Implementation (AI Native)

                    **Parent Epic**: #$EPIC_NUMBER
                    **Parent Story**: #$story_id
                    **Task ID**: $STORY_COUNTER.$task_num
                    **Breakdown Mode**: $BREAKDOWN_MODE

                    ## ü§ñ AI Agent Assignment (Dynamic)

                    **Primary Agent**: AI Selected based on task analysis
                    **Supporting Agents**: Observatory Agent, Context Agent
                    **Execution Mode**: Autonomous implementation with AI optimization

                    ## üß† AI Generated Success Criteria

                    Based on parent Story analysis:
                    - [ ] Implementation aligned with Story goals
                    - [ ] Code quality meeting project standards
                    - [ ] Testing and validation complete
                    - [ ] Documentation and integration ready

                    ## üîó Dependencies

                    - Parent Epic: #$EPIC_NUMBER
                    - Parent Story: #$story_id
                    - AI analyzed dependency chain

                    Ready for AI Agent autonomous execution with dynamic optimization." \
                      --label "ai-agent,epic-task,P3")

                    TASK_ID=$(echo $TASK_RESULT | grep -o '[0-9]*$')
                    if [ -n "$ALL_TASK_IDS" ]; then
                      ALL_TASK_IDS="$ALL_TASK_IDS,$TASK_ID"
                    else
                      ALL_TASK_IDS="$TASK_ID"
                    fi
                  done
                  STORY_COUNTER=$((STORY_COUNTER + 1))
                fi
              done
              ;;

            *)
              echo "Unknown breakdown mode: $BREAKDOWN_MODE"
              exit 1
              ;;
          esac

          # Remove leading comma if present
          ALL_TASK_IDS=$(echo $ALL_TASK_IDS | sed 's/^,//')
          echo "Created Tasks with mode $BREAKDOWN_MODE: $ALL_TASK_IDS"

          # Validate task creation
          TASK_COUNT=$(echo $ALL_TASK_IDS | tr ',' '\n' | grep -v '^$' | wc -l)
          EXPECTED_MIN=2
          if [ "$TASK_COUNT" -lt "$EXPECTED_MIN" ]; then
            echo "ERROR: Expected at least $EXPECTED_MIN tasks but only created $TASK_COUNT"
            gh issue comment ${{ github.event.issue.number }} --body "‚ùå **AI Native Task Creation Incomplete**
            
            Expected at least $EXPECTED_MIN Epic Tasks but only created $TASK_COUNT.
            Mode: $BREAKDOWN_MODE
            Created Task IDs: $ALL_TASK_IDS
            
            Epic breakdown partially failed. Please retry or investigate task creation issues."
            exit 1
          fi

          echo "task_ids=$ALL_TASK_IDS" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üîó Add Items to GitHub Project
        run: |
          echo "Adding Epic breakdown items to GitHub Project..."
          EPIC_NUMBER="${{ github.event.issue.number }}"
          STORY_IDS="${{ steps.create_stories.outputs.story_ids }}"
          TASK_IDS="${{ steps.create_tasks.outputs.task_ids }}"

          # Validate we have items to add
          if [ -z "$STORY_IDS" ] || [ -z "$TASK_IDS" ]; then
            echo "ERROR: Missing Story or Task IDs for project integration"
            gh issue comment ${{ github.event.issue.number }} --body "‚ö†Ô∏è **Project Integration Skipped**
            
            Cannot add items to GitHub Project - missing Story or Task IDs.
            Stories: $STORY_IDS
            Tasks: $TASK_IDS
            
            Epic breakdown items created but not added to project board."
            exit 0
          fi

          # Track success/failure of project additions
          ADDED_STORIES=0
          FAILED_STORIES=0
          ADDED_TASKS=0
          FAILED_TASKS=0

          # Add Stories to Noveli project
          IFS=',' read -ra STORIES <<< "$STORY_IDS"
          for story_id in "${STORIES[@]}"; do
            if [ -n "$story_id" ]; then
              if GH_TOKEN="${{ secrets.PROJECT_TOKEN }}" gh project item-add 2 --owner didgugoluke --url "https://github.com/didgugoluke/liminal-transit/issues/$story_id" 2>/dev/null; then
                echo "‚úÖ Added Story #$story_id to Noveli Project"
                ADDED_STORIES=$((ADDED_STORIES + 1))
              else
                echo "‚ùå Failed to add Story #$story_id to Noveli Project"
                FAILED_STORIES=$((FAILED_STORIES + 1))
              fi
            fi
          done

          # Add Tasks to Noveli project  
          IFS=',' read -ra TASKS <<< "$TASK_IDS"
          for task_id in "${TASKS[@]}"; do
            if [ -n "$task_id" ]; then
              if GH_TOKEN="${{ secrets.PROJECT_TOKEN }}" gh project item-add 2 --owner didgugoluke --url "https://github.com/didgugoluke/liminal-transit/issues/$task_id" 2>/dev/null; then
                echo "‚úÖ Added Task #$task_id to Noveli Project"
                ADDED_TASKS=$((ADDED_TASKS + 1))
              else
                echo "‚ùå Failed to add Task #$task_id to GitHub Project"
                FAILED_TASKS=$((FAILED_TASKS + 1))
              fi
            fi
          done

          # Report project integration results
          if [ "$FAILED_STORIES" -gt 0 ] || [ "$FAILED_TASKS" -gt 0 ]; then
            PROJECT_STATUS="‚ö†Ô∏è **Partial Success** - Some items failed to add to project"
          else
            PROJECT_STATUS="‚úÖ **Full Success** - All items added to project"
          fi

          # Final status comment with AI Native details
          gh issue comment ${{ github.event.issue.number }} --body "‚ö° **AI Native Epic Breakdown Complete**

          **Epic**: #$EPIC_NUMBER  
          **Mode**: $BREAKDOWN_MODE (AI optimized)
          **Stories Created**: $STORY_IDS
          **Tasks Created**: $TASK_IDS

          ## üß† **AI Native Capabilities Applied**

          **Breakdown Intelligence**: Epic analyzed for complexity and requirements
          **Content Generation**: Stories and tasks generated using AI patterns
          **Agent Assignment**: AI agents selected based on task characteristics
          **Dynamic Scaling**: Task count adjusted based on Epic complexity

          ## üéØ **Ready for AI Agent Execution**

          **$PROJECT_STATUS**
          **Project Integration**: Stories: $ADDED_STORIES‚úÖ $FAILED_STORIES‚ùå | Tasks: $ADDED_TASKS‚úÖ $FAILED_TASKS‚ùå
          **Observatory**: Tracking configured for Epic progress
          **AI Agents**: Ready for autonomous task execution with dynamic optimization

          **Epic Structure**: Epic ‚Üí AI Generated Stories ‚Üí AI Generated Tasks
          **Project Board**: https://github.com/users/didgugoluke/projects/1
          **Safeguards**: ‚úÖ Duplication prevention active
          **Learning**: Epic patterns captured for future AI enhancement

          AI Native Epic breakdown and orchestration complete! üöÄ"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
