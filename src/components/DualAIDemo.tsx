/**
 * NOVELI.SH - Dual AI Architecture Demo Component
 * 
 * Demonstrates both AI systems working together:
 * - GitHub Copilot + Claude 4 generated this component (development AI)
 * - OpenAI generates the interactive stories (narrative AI)
 */

import { useState, useEffect } from 'react';
import { ai, dev, story } from '../lib/novelish-ai';

interface StorySession {
  sessionId: string;
  seed: string;
  text: string;
  choice: {
    prompt: string;
    options: ['Y', 'N'];
  };
  beatNumber: number;
  metadata: {
    generatedBy: string;
    continuityLevel: number;
  };
}

interface AIHealthStatus {
  providers: {
    development: {
      provider: string;
      model: string;
      enabled: boolean;
    };
    narrative: {
      provider: string;
      model: string;
      enabled: boolean;
    };
  };
  usage: {
    totalRequests: number;
    totalTokens: number;
    averageResponseTime: number;
  };
}

/**
 * Dual AI Architecture Demo Component
 * Generated by GitHub Copilot + Claude 4 (Development AI)
 */
export function DualAIDemo(): JSX.Element {
  const [storySession, setStorySession] = useState<StorySession | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [aiHealth, setAIHealth] = useState<AIHealthStatus | null>(null);
  const [generatedCode, setGeneratedCode] = useState<string>('');
  const [showCodeDemo, setShowCodeDemo] = useState(false);

  // Load AI health status on component mount
  useEffect(() => {
    loadAIHealth();
  }, []);

  /**
   * NARRATIVE AI DEMO - OpenAI for storytelling
   */
  const startNewStory = async () => {
    setIsLoading(true);
    try {
      const newStory = await story.start();
      setStorySession(newStory);
    } catch (error) {
      console.error('Failed to start story:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const makeChoice = async (choice: 'Y' | 'N') => {
    if (!storySession) return;
    
    setIsLoading(true);
    try {
      const nextBeat = await story.continue(
        storySession.sessionId,
        choice,
        storySession.beatNumber
      );
      setStorySession(nextBeat);
    } catch (error) {
      console.error('Failed to continue story:', error);
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * DEVELOPMENT AI DEMO - GitHub Copilot + Claude 4 for code generation
   */
  const generateSampleCode = async () => {
    setIsLoading(true);
    try {
      const result = await dev.component(
        'Interactive button with hover effects and accessibility',
        {
          responsive: true,
          accessible: true,
          animations: true,
          theme: 'NOVELI.SH typography-first'
        }
      );
      setGeneratedCode(result.code);
      setShowCodeDemo(true);
    } catch (error) {
      console.error('Failed to generate code:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const loadAIHealth = async () => {
    try {
      const health = ai.getAIHealth();
      setAIHealth(health);
    } catch (error) {
      console.error('Failed to load AI health:', error);
    }
  };

  return (
    <div className="dual-ai-demo">
      {/* Header */}
      <header className="demo-header">
        <h1>NOVELI.SH Dual AI Architecture</h1>
        <p>Demonstrating two specialized AI systems working together</p>
      </header>

      {/* AI Health Status */}
      <section className="ai-health">
        <h2>AI Provider Status</h2>
        {aiHealth && (
          <div className="health-grid">
            <div className="provider-card development">
              <h3>Development AI</h3>
              <p><strong>Provider:</strong> {aiHealth.providers.development.provider}</p>
              <p><strong>Model:</strong> {aiHealth.providers.development.model}</p>
              <p><strong>Purpose:</strong> Code generation, review, GitHub Actions</p>
              <div className={`status ${aiHealth.providers.development.enabled ? 'online' : 'offline'}`}>
                {aiHealth.providers.development.enabled ? 'ðŸŸ¢ Online' : 'ðŸ”´ Offline'}
              </div>
            </div>
            
            <div className="provider-card narrative">
              <h3>Narrative AI</h3>
              <p><strong>Provider:</strong> {aiHealth.providers.narrative.provider}</p>
              <p><strong>Model:</strong> {aiHealth.providers.narrative.model}</p>
              <p><strong>Purpose:</strong> Interactive storytelling, narrative generation</p>
              <div className={`status ${aiHealth.providers.narrative.enabled ? 'online' : 'offline'}`}>
                {aiHealth.providers.narrative.enabled ? 'ðŸŸ¢ Online' : 'ðŸ”´ Offline'}
              </div>
            </div>
          </div>
        )}
      </section>

      {/* Dual AI Demo Tabs */}
      <section className="demo-tabs">
        <div className="tab-buttons">
          <button 
            className={!showCodeDemo ? 'active' : ''}
            onClick={() => setShowCodeDemo(false)}
          >
            Narrative AI Demo
          </button>
          <button 
            className={showCodeDemo ? 'active' : ''}
            onClick={() => setShowCodeDemo(true)}
          >
            Development AI Demo
          </button>
        </div>

        {!showCodeDemo ? (
          /* NARRATIVE AI DEMO */
          <div className="narrative-demo">
            <h2>Interactive Storytelling - OpenAI</h2>
            <p>Experience NOVELI.SH&apos;s narrative generation powered by OpenAI</p>
            
            <div className="story-container">
              {!storySession ? (
                <div className="story-start">
                  <p>Begin your journey in the liminal spaces between destinations...</p>
                  <button 
                    onClick={startNewStory}
                    disabled={isLoading}
                    className="start-story-btn"
                  >
                    {isLoading ? 'Generating...' : 'Start Story'}
                  </button>
                </div>
              ) : (
                <div className="story-session">
                  <div className="story-metadata">
                    <span>Beat {storySession.beatNumber}</span>
                    <span>Generated by {storySession.metadata.generatedBy}</span>
                    <span>Session: {storySession.sessionId}</span>
                  </div>
                  
                  <div className="story-text">
                    {storySession.text}
                  </div>
                  
                  {!storySession.text.includes('(Restart?)') && (
                    <div className="choice-buttons">
                      <button 
                        onClick={() => makeChoice('Y')}
                        disabled={isLoading}
                        className="choice-btn yes"
                      >
                        Y
                      </button>
                      <button 
                        onClick={() => makeChoice('N')}
                        disabled={isLoading}
                        className="choice-btn no"
                      >
                        N
                      </button>
                    </div>
                  )}
                  
                  {storySession.text.includes('(Restart?)') && (
                    <button 
                      onClick={startNewStory}
                      disabled={isLoading}
                      className="restart-btn"
                    >
                      {isLoading ? 'Generating...' : 'Start New Story'}
                    </button>
                  )}
                </div>
              )}
            </div>
          </div>
        ) : (
          /* DEVELOPMENT AI DEMO */
          <div className="development-demo">
            <h2>Code Generation - GitHub Copilot + Claude 4</h2>
            <p>Watch our development AI generate production-ready TypeScript components</p>
            
            <div className="code-generation">
              <button 
                onClick={generateSampleCode}
                disabled={isLoading}
                className="generate-code-btn"
              >
                {isLoading ? 'Generating Code...' : 'Generate React Component'}
              </button>
              
              {generatedCode && (
                <div className="generated-code">
                  <h3>Generated TypeScript Component</h3>
                  <pre className="code-block">
                    <code>{generatedCode}</code>
                  </pre>
                </div>
              )}
            </div>
          </div>
        )}
      </section>

      {/* Usage Statistics */}
      {aiHealth && (
        <section className="usage-stats">
          <h2>AI Usage Statistics</h2>
          <div className="stats-grid">
            <div className="stat">
              <span className="stat-value">{aiHealth.usage.totalRequests}</span>
              <span className="stat-label">Total Requests</span>
            </div>
            <div className="stat">
              <span className="stat-value">{aiHealth.usage.totalTokens.toLocaleString()}</span>
              <span className="stat-label">Tokens Used</span>
            </div>
            <div className="stat">
              <span className="stat-value">{Math.round(aiHealth.usage.averageResponseTime)}ms</span>
              <span className="stat-label">Avg Response Time</span>
            </div>
          </div>
        </section>
      )}

      {/* Architecture Overview */}
      <section className="architecture-overview">
        <h2>Dual AI Architecture Benefits</h2>
        <div className="benefits-grid">
          <div className="benefit">
            <h3>Specialized Excellence</h3>
            <p>Claude 4&apos;s reasoning for precise code generation and GitHub Copilot integration</p>
          </div>
          <div className="benefit">
            <h3>Creative Storytelling</h3>
            <p>OpenAI&apos;s narrative capabilities for engaging NOVELI.SH interactive stories</p>
          </div>
          <div className="benefit">
            <h3>Cost Optimization</h3>
            <p>Right model for the right task - efficiency and quality balanced</p>
          </div>
          <div className="benefit">
            <h3>Fallback Reliability</h3>
            <p>Multiple AI providers ensure system resilience and uptime</p>
          </div>
        </div>
      </section>
    </div>
  );
}

/**
 * Styling for the Dual AI Demo
 * Following NOVELI.SH typography-first design principles
 */
export const dualAIDemoStyles = `
.dual-ai-demo {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
  line-height: 1.6;
  color: #333;
}

.demo-header {
  text-align: center;
  margin-bottom: 3rem;
}

.demo-header h1 {
  font-size: 2.5rem;
  font-weight: 300;
  margin-bottom: 0.5rem;
  letter-spacing: -0.02em;
}

.demo-header p {
  font-size: 1.1rem;
  color: #666;
}

.ai-health {
  margin-bottom: 3rem;
}

.health-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 1.5rem;
  margin-top: 1rem;
}

.provider-card {
  padding: 1.5rem;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  background: #fafafa;
}

.provider-card h3 {
  margin-top: 0;
  margin-bottom: 1rem;
  font-weight: 500;
}

.provider-card p {
  margin: 0.5rem 0;
  font-size: 0.9rem;
}

.status {
  margin-top: 1rem;
  padding: 0.5rem;
  border-radius: 4px;
  font-weight: 500;
}

.status.online {
  background: #e8f5e8;
  color: #2d5a2d;
}

.status.offline {
  background: #ffeaea;
  color: #8b0000;
}

.demo-tabs {
  margin-bottom: 3rem;
}

.tab-buttons {
  display: flex;
  margin-bottom: 2rem;
  border-bottom: 1px solid #e0e0e0;
}

.tab-buttons button {
  padding: 1rem 2rem;
  border: none;
  background: none;
  cursor: pointer;
  font-size: 1rem;
  border-bottom: 2px solid transparent;
  transition: all 0.2s ease;
}

.tab-buttons button.active {
  border-bottom-color: #333;
  font-weight: 500;
}

.story-container {
  background: #f9f9f9;
  padding: 2rem;
  border-radius: 8px;
  margin-top: 1rem;
}

.story-metadata {
  display: flex;
  gap: 1rem;
  margin-bottom: 1rem;
  font-size: 0.8rem;
  color: #666;
}

.story-text {
  font-size: 1.1rem;
  line-height: 1.8;
  margin: 1.5rem 0;
  white-space: pre-line;
}

.choice-buttons {
  display: flex;
  gap: 1rem;
  margin-top: 2rem;
}

.choice-btn {
  min-width: 100px;
  padding: 1rem 2rem;
  border: 2px solid #333;
  background: white;
  cursor: pointer;
  font-size: 1.1rem;
  font-weight: 500;
  border-radius: 4px;
  transition: all 0.2s ease;
}

.choice-btn:hover {
  background: #333;
  color: white;
}

.choice-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.start-story-btn,
.restart-btn,
.generate-code-btn {
  padding: 1rem 2rem;
  background: #333;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 1rem;
  transition: all 0.2s ease;
}

.start-story-btn:hover,
.restart-btn:hover,
.generate-code-btn:hover {
  background: #555;
}

.start-story-btn:disabled,
.restart-btn:disabled,
.generate-code-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.generated-code {
  margin-top: 2rem;
}

.code-block {
  background: #1e1e1e;
  color: #d4d4d4;
  padding: 1.5rem;
  border-radius: 4px;
  overflow-x: auto;
  font-family: 'Monaco', 'Menlo', monospace;
  font-size: 0.9rem;
  line-height: 1.4;
}

.usage-stats {
  margin-bottom: 3rem;
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1.5rem;
  margin-top: 1rem;
}

.stat {
  text-align: center;
  padding: 1.5rem;
  background: #f9f9f9;
  border-radius: 8px;
}

.stat-value {
  display: block;
  font-size: 2rem;
  font-weight: 300;
  color: #333;
}

.stat-label {
  font-size: 0.9rem;
  color: #666;
}

.benefits-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  margin-top: 1rem;
}

.benefit {
  padding: 1.5rem;
  border-left: 4px solid #333;
  background: #f9f9f9;
}

.benefit h3 {
  margin-top: 0;
  margin-bottom: 0.5rem;
  font-weight: 500;
}

/* Mobile responsiveness */
@media (max-width: 768px) {
  .dual-ai-demo {
    padding: 1rem;
  }
  
  .demo-header h1 {
    font-size: 2rem;
  }
  
  .health-grid,
  .stats-grid,
  .benefits-grid {
    grid-template-columns: 1fr;
  }
  
  .tab-buttons {
    flex-direction: column;
  }
  
  .choice-buttons {
    flex-direction: column;
  }
  
  .story-metadata {
    flex-direction: column;
    gap: 0.5rem;
  }
}
`;

export default DualAIDemo;
